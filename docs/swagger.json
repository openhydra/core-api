{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/apis/core-api.openhydra.io/v1/flavors/{flavorId}": {
            "get": {
                "description": "show flavor detail",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flavor"
                ],
                "summary": "show flavor detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "flavor id",
                        "name": "flavorId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.Flavor"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/core-api.openhydra.io/v1/groups": {
            "get": {
                "description": "list all groups",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group"
                ],
                "summary": "list all groups",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.CoreGroup"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "post": {
                "description": "create group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group"
                ],
                "summary": "create group",
                "parameters": [
                    {
                        "description": "group post",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.CoreGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.CoreGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/core-api.openhydra.io/v1/groups/summary/all/count": {
            "get": {
                "description": "show group summary",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group"
                ],
                "summary": "show group summary",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.CoreGroupSummary"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/core-api.openhydra.io/v1/groups/{groupId}": {
            "get": {
                "description": "get detail of group with given username",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group"
                ],
                "summary": "get detail of group with given username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "group id",
                        "name": "groupId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.CoreGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "put": {
                "description": "update group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group"
                ],
                "summary": "update group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "group id",
                        "name": "groupId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "group post",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.CoreGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.CoreGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group"
                ],
                "summary": "delete group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "group id",
                        "name": "groupId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.CoreGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/core-api.openhydra.io/v1/groups/{groupId}/users": {
            "get": {
                "description": "list all users in group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group"
                ],
                "summary": "list all users in group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "group id",
                        "name": "groupId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.CoreUser"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "put": {
                "description": "add users to group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group"
                ],
                "summary": "add users to group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "group id",
                        "name": "groupId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "users to add to group",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.CoreUser"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/route.CustomErrorUsersAddToGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/core-api.openhydra.io/v1/groups/{groupId}/users/not-in-group/list": {
            "get": {
                "description": "list all users not in group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group"
                ],
                "summary": "list all users not in group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "group id",
                        "name": "groupId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.CoreUser"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/core-api.openhydra.io/v1/groups/{groupId}/users/{userId}": {
            "put": {
                "description": "add user to group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group"
                ],
                "summary": "add user to group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "group id",
                        "name": "groupId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.CoreUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "delete": {
                "description": "remove user from group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group"
                ],
                "summary": "remove user from group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "group id",
                        "name": "groupId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.CoreUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/core-api.openhydra.io/v1/licenses/{licenseId}": {
            "get": {
                "description": "show license detail",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "license"
                ],
                "summary": "show license detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "license id",
                        "name": "licenseId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.SystemInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/core-api.openhydra.io/v1/roles": {
            "get": {
                "description": "show role list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "role"
                ],
                "summary": "show role list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.CoreRole"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "post": {
                "description": "create role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "role"
                ],
                "summary": "create role",
                "parameters": [
                    {
                        "description": "role post",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.CoreRole"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.CoreRole"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/core-api.openhydra.io/v1/roles/{roleId}": {
            "get": {
                "description": "show role detail",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "role"
                ],
                "summary": "show role detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "role id",
                        "name": "roleId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.CoreRole"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "put": {
                "description": "update role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "role"
                ],
                "summary": "update role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "role id",
                        "name": "roleId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "role post",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.CoreRole"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.CoreRole"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "role"
                ],
                "summary": "delete role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "role id",
                        "name": "roleId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.CoreRole"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/core-api.openhydra.io/v1/sandboxes/{userId}": {
            "get": {
                "description": "show openhydra sandbox list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flavor"
                ],
                "summary": "show openhydra sandbox list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "whether to load running sandbox stat e.g. ?loadRunningStat=1",
                        "name": "loadRunningStat",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.WrapperSandbox"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/core-api.openhydra.io/v1/summary/{summaryType}": {
            "get": {
                "description": "show resource summary",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "summary"
                ],
                "summary": "show resource summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "summary type not you can use any kind of string",
                        "name": "summaryType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.Summary"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/core-api.openhydra.io/v1/users": {
            "get": {
                "description": "list all users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "list all users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "filter with username e.g. ?name=ZhangSan",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter with group e.g. ?group=id1\u0026group=id2",
                        "name": "group",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.CoreUser"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "post": {
                "description": "create user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "create user",
                "parameters": [
                    {
                        "description": "user post",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.CoreUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.CoreUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/core-api.openhydra.io/v1/users/login": {
            "post": {
                "description": "user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "user login",
                "parameters": [
                    {
                        "description": "login params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.CoreUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.CoreUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/core-api.openhydra.io/v1/users/upload": {
            "post": {
                "description": "upload users from csv or txt split by comma",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "upload users from csv or txt split by comma",
                "parameters": [
                    {
                        "description": "file uploads",
                        "name": "file",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/core-api.openhydra.io/v1/users/{id}": {
            "get": {
                "description": "show user detail",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "show user detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "load permission or not e.g. ?loadPermission=1",
                        "name": "loadPermission",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "load password or not e.g. ?loadPassword=1",
                        "name": "loadPassword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.CoreUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/core-api.openhydra.io/v1/users/{userId}": {
            "put": {
                "description": "update user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "update user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "user post",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.CoreUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.CoreUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete user with given id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "delete user with given id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.CoreUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/core-api.openhydra.io/v1/versions/{versionId}": {
            "get": {
                "description": "show version info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "version"
                ],
                "summary": "show version info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "version id",
                        "name": "versionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.VersionInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/open-hydra-server.openhydra.io/extendV1/settings": {
            "get": {
                "description": "get settings list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "get settings list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/open-hydra-server-api_cmd_open-hydra-server_app_config.OpenHydraServerConfig"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/open-hydra-server.openhydra.io/extendV1/settings/{settingId}": {
            "get": {
                "description": "get settings detail",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "get settings detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "setting id",
                        "name": "settingId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/open-hydra-server-api_cmd_open-hydra-server_app_config.OpenHydraServerConfig"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "patch": {
                "description": "patch settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "patch settings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "setting id",
                        "name": "settingId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "setting patch",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/open-hydra-server-api_cmd_open-hydra-server_app_config.OpenHydraServerConfig"
                        }
                    },
                    {
                        "type": "string",
                        "description": "either storage,runtimeResource,serverIp,gpuType  e.g. ?saveSection=storage",
                        "name": "saveSection",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/open-hydra-server-api_cmd_open-hydra-server_app_config.OpenHydraServerConfig"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/open-hydra-server.openhydra.io/v1/courses": {
            "get": {
                "description": "show course list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "course"
                ],
                "summary": "show course list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_course_core_v1.Course"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "post": {
                "description": "create course",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "course"
                ],
                "summary": "create course",
                "parameters": [
                    {
                        "description": "course post",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_course_core_v1.Course"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_course_core_v1.Course"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/open-hydra-server.openhydra.io/v1/courses/{courseId}": {
            "get": {
                "description": "show course detail",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "course"
                ],
                "summary": "show course detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "course id",
                        "name": "courseId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_course_core_v1.Course"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete course",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "course"
                ],
                "summary": "delete course",
                "parameters": [
                    {
                        "type": "string",
                        "description": "course id",
                        "name": "courseId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_course_core_v1.Course"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/open-hydra-server.openhydra.io/v1/datasets": {
            "get": {
                "description": "show dataset list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dataset"
                ],
                "summary": "show dataset list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_dataset_core_v1.Dataset"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "post": {
                "description": "create dataset",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dataset"
                ],
                "summary": "create dataset",
                "parameters": [
                    {
                        "description": "login params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_dataset_core_v1.Dataset"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_dataset_core_v1.Dataset"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/open-hydra-server.openhydra.io/v1/datasets/{datasetId}": {
            "get": {
                "description": "show dataset detail",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dataset"
                ],
                "summary": "show dataset detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "dataset id",
                        "name": "datasetId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_dataset_core_v1.Dataset"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete dataset",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dataset"
                ],
                "summary": "delete dataset",
                "parameters": [
                    {
                        "type": "string",
                        "description": "dataset id",
                        "name": "datasetId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_dataset_core_v1.Dataset"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/open-hydra-server.openhydra.io/v1/devices": {
            "get": {
                "description": "show device list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device"
                ],
                "summary": "show device list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_device_core_v1.Device"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "post": {
                "description": "create device",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device"
                ],
                "summary": "create device",
                "parameters": [
                    {
                        "description": "device post",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_device_core_v1.Device"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_device_core_v1.Device"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/open-hydra-server.openhydra.io/v1/devices/{userId}": {
            "get": {
                "description": "get detail of device with given username",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device"
                ],
                "summary": "get detail of device with given username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_device_core_v1.Device"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete device with given username",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device"
                ],
                "summary": "delete device with given username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_device_core_v1.Device"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/rag.openhydra.io/v1/chat_quick_starts": {
            "get": {
                "description": "show chat quick starts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rag"
                ],
                "summary": "show chat quick starts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.ChatQuickStarts"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/rag.openhydra.io/v1/chats": {
            "post": {
                "description": "create chats",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rag"
                ],
                "summary": "create chats",
                "parameters": [
                    {
                        "description": "chat post",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.ChatPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/rag.openhydra.io/v1/conversations": {
            "get": {
                "description": "show conversations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rag"
                ],
                "summary": "show conversations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "chat type e.g. chatTypes=llm_chat | file_chat | kb_chat | all or chatTypes=llm_chat,file_chat",
                        "name": "chatTypes",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.Conversation"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "post": {
                "description": "create conversation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rag"
                ],
                "summary": "create conversation",
                "parameters": [
                    {
                        "description": "conversation post",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.Conversation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.Conversation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/rag.openhydra.io/v1/conversations/users/{userId}": {
            "get": {
                "description": "show conversation of user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rag"
                ],
                "summary": "show conversation of user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "chat type e.g. chatTypes=llm_chat | file_chat | kb_chat | all or chatTypes=llm_chat,file_chat",
                        "name": "chatTypes",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.Conversation"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete conversation of user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rag"
                ],
                "summary": "delete conversation of user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.Conversation"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/rag.openhydra.io/v1/conversations/{conversationId}": {
            "get": {
                "description": "show conversation by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rag"
                ],
                "summary": "show conversation by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "conversation id",
                        "name": "conversationId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.Conversation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete conversation by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rag"
                ],
                "summary": "delete conversation by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "conversation id",
                        "name": "conversationId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.Conversation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "patch": {
                "description": "patch conversation by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rag"
                ],
                "summary": "patch conversation by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "conversation id",
                        "name": "conversationId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "conversation patch",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.Conversation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.Conversation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/rag.openhydra.io/v1/conversations/{conversationId}/messages": {
            "get": {
                "description": "show messages of a conversation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rag"
                ],
                "summary": "show messages of a conversation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "conversation id",
                        "name": "conversationId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.ConversationMessage"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/rag.openhydra.io/v1/conversations/{conversationId}/messages/{messageId}": {
            "get": {
                "description": "show messages by message id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rag"
                ],
                "summary": "show messages by message id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "message id",
                        "name": "messageId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "conversation id",
                        "name": "conversationId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.ConversationMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/rag.openhydra.io/v1/file_chat": {
            "post": {
                "description": "chat with a file",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rag"
                ],
                "summary": "chat with a file",
                "parameters": [
                    {
                        "description": "message post",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.FileChatPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/rag.openhydra.io/v1/file_chat/{userId}": {
            "post": {
                "description": "create a file chat alone with conversation and file",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rag"
                ],
                "summary": "create a file chat alone with conversation and file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "user id",
                        "name": "user_id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "file uploads",
                        "name": "files",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.Conversation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/rag.openhydra.io/v1/knowledge_bases": {
            "get": {
                "description": "show public knowledge bases",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rag"
                ],
                "summary": "show public knowledge bases",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.KnowledgeBase"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "post": {
                "description": "create knowledge base",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rag"
                ],
                "summary": "create knowledge base",
                "parameters": [
                    {
                        "description": "knowledge base post",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.KnowledgeBase"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.KnowledgeBase"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/rag.openhydra.io/v1/knowledge_bases/users/{userId}": {
            "get": {
                "description": "show knowledge bases of user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rag"
                ],
                "summary": "show knowledge bases of user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "either groupedKB or publicKB or publicKB,groupedKB e.g. ?appendKB=publicKB,groupedKB",
                        "name": "appendKB",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.KnowledgeBase"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/rag.openhydra.io/v1/knowledge_bases/{knowledgeBaseId}": {
            "get": {
                "description": "show knowledge base detail",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rag"
                ],
                "summary": "show knowledge base detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "knowledge base name",
                        "name": "knowledgeBaseName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.KnowledgeBase"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete knowledge base",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rag"
                ],
                "summary": "delete knowledge base",
                "parameters": [
                    {
                        "type": "string",
                        "description": "knowledge base name",
                        "name": "knowledgeBaseName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.KnowledgeBase"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "patch": {
                "description": "patch knowledge base",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rag"
                ],
                "summary": "patch knowledge base",
                "parameters": [
                    {
                        "type": "string",
                        "description": "knowledge base name",
                        "name": "knowledgeBaseName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "knowledge base patch",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.KnowledgeBase"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.KnowledgeBase"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/rag.openhydra.io/v1/knowledge_bases/{knowledgeBaseId}/files": {
            "get": {
                "description": "show knowledge base files",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rag"
                ],
                "summary": "show knowledge base files",
                "parameters": [
                    {
                        "type": "string",
                        "description": "knowledge base name",
                        "name": "knowledgeBaseName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.KnowledgeBaseFileList"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete knowledge base file",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rag"
                ],
                "summary": "delete knowledge base file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "knowledge base name",
                        "name": "knowledgeBaseName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "files to be delete",
                        "name": "fileIds",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.KnowledgeBaseFilesToDelete"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.KnowledgeBaseCommonResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/rag.openhydra.io/v1/knowledge_bases/{knowledgeBaseId}/kb_chat": {
            "post": {
                "description": "chat with a knowledge base",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rag"
                ],
                "summary": "chat with a knowledge base",
                "parameters": [
                    {
                        "description": "message post",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.KbChatPost"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/rag.openhydra.io/v1/knowledge_bases/{knowledgeBaseId}/upload": {
            "post": {
                "description": "upload file to knowledge base",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rag"
                ],
                "summary": "upload file to knowledge base",
                "parameters": [
                    {
                        "type": "string",
                        "description": "knowledge base name",
                        "name": "knowledgeBaseId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "knowledge base id which will direct forward to south api",
                        "name": "kb_id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "knowledge base name which will direct forward to south api",
                        "name": "kb_name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "type": "file",
                        "description": "array of files to upload, support multiple files",
                        "name": "files",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.KnowledgeBase"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/rag.openhydra.io/v1/quick_file_chat": {
            "post": {
                "description": "create a quick file chat",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rag"
                ],
                "summary": "create a quick file chat",
                "parameters": [
                    {
                        "description": "conversation post",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.Conversation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.Conversation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/ray-llm-inference.openhydra.io/v1/models": {
            "get": {
                "description": "show ray_llm models",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ray-llm-inference"
                ],
                "summary": "show ray_llm models",
                "parameters": [
                    {
                        "type": "string",
                        "description": "either llm_models or embedding_models or all e.g. ?llmType=llm_models",
                        "name": "llmType",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "post": {
                "description": "create model",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ray-llm-inference"
                ],
                "summary": "create model",
                "parameters": [
                    {
                        "description": "model post",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/south.RayDeployment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/south.RayDeployment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/ray-llm-inference.openhydra.io/v1/models/{modelId}": {
            "get": {
                "description": "show ray_llm model detail",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ray-llm-inference"
                ],
                "summary": "show ray_llm model detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "model id",
                        "name": "modelId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/south.RayDeployment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete ray_llm model",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ray-llm-inference"
                ],
                "summary": "delete ray_llm model",
                "parameters": [
                    {
                        "type": "string",
                        "description": "model id",
                        "name": "modelId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/south.RayDeployment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/xinference.openhydra.io/v1/models": {
            "get": {
                "description": "show xinference models",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "xinference"
                ],
                "summary": "show xinference models",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.XInferenceModelList"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "post": {
                "description": "create xinference model",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "xinference"
                ],
                "summary": "create xinference model",
                "parameters": [
                    {
                        "description": "model post",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.XInferenceModelFontLauncher"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.XInferenceModelFontLauncher"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        },
        "/apis/xinference.openhydra.io/v1/models/{modelId}": {
            "get": {
                "description": "show xinference model detail",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "xinference"
                ],
                "summary": "show xinference model detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "model id",
                        "name": "modelId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.XInferenceModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete xinference model",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "xinference"
                ],
                "summary": "delete xinference model",
                "parameters": [
                    {
                        "type": "string",
                        "description": "model id",
                        "name": "modelId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.XInferenceModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.CustomError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "http.CustomError": {
            "type": "object",
            "properties": {
                "customErrCode": {
                    "type": "string"
                },
                "data": {
                    "$ref": "#/definitions/http.FileUploadFailedResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "http.FileUploadFailedResponse": {
            "type": "object",
            "properties": {
                "failed_files": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "filename": {
                                "type": "string"
                            },
                            "msg": {
                                "type": "string"
                            }
                        }
                    }
                },
                "id": {
                    "type": "string"
                },
                "succeeded_files": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "filename": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "open-hydra-server-api_cmd_open-hydra-server_app_config.AuthDelegateConfig": {
            "type": "object",
            "properties": {
                "keystone_config": {
                    "description": "if KeystoneConfig is set to nil then auth plugin will fall backup to database auth",
                    "allOf": [
                        {
                            "$ref": "#/definitions/open-hydra-server-api_cmd_open-hydra-server_app_config.KeystoneConfig"
                        }
                    ]
                }
            }
        },
        "open-hydra-server-api_cmd_open-hydra-server_app_config.EtcdConfig": {
            "type": "object",
            "properties": {
                "ca_file": {
                    "type": "string"
                },
                "cert_file": {
                    "type": "string"
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "key_file": {
                    "type": "string"
                }
            }
        },
        "open-hydra-server-api_cmd_open-hydra-server_app_config.KeystoneConfig": {
            "type": "object",
            "properties": {
                "domain_id": {
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "token_key_in_request": {
                    "type": "string"
                },
                "token_key_in_response": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "open-hydra-server-api_cmd_open-hydra-server_app_config.MySqlConfig": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "character": {
                    "type": "string"
                },
                "collation": {
                    "type": "string"
                },
                "database_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "open-hydra-server-api_cmd_open-hydra-server_app_config.OpenHydraServerConfig": {
            "type": "object",
            "properties": {
                "auth_delegate_config": {
                    "$ref": "#/definitions/open-hydra-server-api_cmd_open-hydra-server_app_config.AuthDelegateConfig"
                },
                "course_base_path": {
                    "type": "string"
                },
                "course_max_size": {
                    "type": "integer"
                },
                "course_student_mount_path": {
                    "type": "string"
                },
                "cpu_over_commit_rate": {
                    "type": "integer"
                },
                "dataset_base_path": {
                    "description": "default = \"/open-hydra/public-dataset\"\nall dataset upload by user will be store in this path",
                    "type": "string"
                },
                "dataset_max_size": {
                    "type": "integer"
                },
                "dataset_student_mount_path": {
                    "description": "default = \"/root/public-dataset\"",
                    "type": "string"
                },
                "dataset_volume_type": {
                    "description": "default = \"hostpath\", hostpath or nfs\nhostpath: open-hydra-server will use hostpath to mount dataset most likely for aio server or test\nnfs: open-hydra-server will use nfs to mount dataset most likely for production",
                    "type": "string"
                },
                "db_type": {
                    "type": "string"
                },
                "default_cpu_per_device": {
                    "description": "default = 2000\nnote unit is m",
                    "type": "integer"
                },
                "default_gpu_driver": {
                    "description": "should be no default value but fill it in installation script, because it is a runtime value\nif not set we won't be able to start gpu pod at all",
                    "type": "string"
                },
                "default_gpu_per_device": {
                    "description": "default = 0",
                    "type": "integer"
                },
                "default_ram_per_device": {
                    "description": "default = 8192\nnote unit is Mi",
                    "type": "integer"
                },
                "disable_auth": {
                    "type": "boolean"
                },
                "etcd_config": {
                    "$ref": "#/definitions/open-hydra-server-api_cmd_open-hydra-server_app_config.EtcdConfig"
                },
                "gpu_resource_keys": {
                    "description": "gpu resource keys that predefine for open-hydra-server to discover gpu resource",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "maximum_ports_per_sandbox": {
                    "type": "integer"
                },
                "memory_over_commit_rate": {
                    "type": "integer"
                },
                "mysql_config": {
                    "$ref": "#/definitions/open-hydra-server-api_cmd_open-hydra-server_app_config.MySqlConfig"
                },
                "patch_resource_not_release": {
                    "type": "boolean"
                },
                "pod_allocatable_limit": {
                    "description": "in case of we want to control total pod number in cluster\n-1 not limit pod allocatable will be count by resource wise",
                    "type": "integer"
                },
                "server_ip": {
                    "type": "string"
                },
                "workspace_path": {
                    "type": "string"
                }
            }
        },
        "open-hydra-server-api_pkg_apis_open-hydra-api_course_core_v1.Course": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/v1.ObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_course_core_v1.CourseSpec"
                },
                "status": {
                    "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_course_core_v1.CourseStatus"
                }
            }
        },
        "open-hydra-server-api_pkg_apis_open-hydra-api_course_core_v1.CourseSpec": {
            "type": "object",
            "properties": {
                "createdBy": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "lastUpdate": {
                    "type": "string"
                },
                "level": {
                    "type": "integer"
                },
                "sandboxName": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "open-hydra-server-api_pkg_apis_open-hydra-api_course_core_v1.CourseStatus": {
            "type": "object"
        },
        "open-hydra-server-api_pkg_apis_open-hydra-api_dataset_core_v1.Dataset": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/v1.ObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_dataset_core_v1.DatasetSpec"
                },
                "status": {
                    "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_dataset_core_v1.DatasetStatus"
                }
            }
        },
        "open-hydra-server-api_pkg_apis_open-hydra-api_dataset_core_v1.DatasetSpec": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "lastUpdate": {
                    "type": "string"
                }
            }
        },
        "open-hydra-server-api_pkg_apis_open-hydra-api_dataset_core_v1.DatasetStatus": {
            "type": "object"
        },
        "open-hydra-server-api_pkg_apis_open-hydra-api_device_core_v1.Device": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/v1.ObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_device_core_v1.DeviceSpec"
                },
                "status": {
                    "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_device_core_v1.DeviceStatus"
                }
            }
        },
        "open-hydra-server-api_pkg_apis_open-hydra-api_device_core_v1.DeviceSpec": {
            "type": "object",
            "properties": {
                "affinity": {
                    "$ref": "#/definitions/v1.Affinity"
                },
                "chineseName": {
                    "type": "string"
                },
                "deviceCpu": {
                    "type": "string"
                },
                "deviceGpu": {
                    "type": "integer"
                },
                "deviceIP": {
                    "type": "string"
                },
                "deviceName": {
                    "type": "string"
                },
                "deviceNamespace": {
                    "type": "string"
                },
                "deviceRam": {
                    "type": "string"
                },
                "deviceStatus": {
                    "type": "string"
                },
                "deviceType": {
                    "type": "string"
                },
                "gpuDriver": {
                    "type": "string"
                },
                "lineNo": {
                    "type": "string"
                },
                "openHydraUsername": {
                    "type": "string"
                },
                "role": {
                    "type": "integer"
                },
                "sandboxName": {
                    "type": "string"
                },
                "sandboxURLs": {
                    "type": "string"
                },
                "usePublicDataSet": {
                    "type": "boolean"
                }
            }
        },
        "open-hydra-server-api_pkg_apis_open-hydra-api_device_core_v1.DeviceStatus": {
            "type": "object"
        },
        "open-hydra-server-api_pkg_apis_open-hydra-api_setting_core_v1.Setting": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/v1.ObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_setting_core_v1.SettingSpec"
                },
                "status": {
                    "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_setting_core_v1.SettingStatus"
                }
            }
        },
        "open-hydra-server-api_pkg_apis_open-hydra-api_setting_core_v1.SettingSpec": {
            "type": "object",
            "properties": {
                "default_gpu_per_device": {
                    "type": "integer"
                },
                "plugin_list": {
                    "$ref": "#/definitions/open-hydra-server-api_pkg_open-hydra_apis.PluginList"
                }
            }
        },
        "open-hydra-server-api_pkg_apis_open-hydra-api_setting_core_v1.SettingStatus": {
            "type": "object"
        },
        "open-hydra-server-api_pkg_apis_open-hydra-api_summary_core_v1.GpuResourceSumUp": {
            "type": "object",
            "properties": {
                "allocatable": {
                    "type": "integer"
                },
                "allocated": {
                    "type": "integer"
                }
            }
        },
        "open-hydra-server-api_pkg_apis_open-hydra-api_summary_core_v1.SumUp": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/v1.ObjectMeta"
                },
                "spec": {
                    "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_summary_core_v1.SumUpSpec"
                },
                "status": {
                    "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_summary_core_v1.SumUpStatus"
                }
            }
        },
        "open-hydra-server-api_pkg_apis_open-hydra-api_summary_core_v1.SumUpSpec": {
            "type": "object",
            "properties": {
                "defaultCpuPerDevice": {
                    "type": "string"
                },
                "defaultGpuPerDevice": {
                    "type": "integer"
                },
                "defaultRamPerDevice": {
                    "type": "string"
                },
                "gpuAllocatable": {
                    "type": "string"
                },
                "gpuAllocated": {
                    "type": "string"
                },
                "gpuResourceSumUp": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_summary_core_v1.GpuResourceSumUp"
                    }
                },
                "podAllocatable": {
                    "type": "integer"
                },
                "podAllocated": {
                    "type": "integer"
                },
                "totalLine": {
                    "type": "integer"
                }
            }
        },
        "open-hydra-server-api_pkg_apis_open-hydra-api_summary_core_v1.SumUpStatus": {
            "type": "object"
        },
        "open-hydra-server-api_pkg_open-hydra_apis.EmptyDir": {
            "type": "object",
            "properties": {
                "medium": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "size_limit": {
                    "type": "integer"
                }
            }
        },
        "open-hydra-server-api_pkg_open-hydra_apis.HostPath": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "open-hydra-server-api_pkg_open-hydra_apis.PluginList": {
            "type": "object",
            "properties": {
                "defaultSandbox": {
                    "type": "string"
                },
                "sandboxes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/open-hydra-server-api_pkg_open-hydra_apis.Sandbox"
                    }
                }
            }
        },
        "open-hydra-server-api_pkg_open-hydra_apis.Sandbox": {
            "type": "object",
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cpuImageName": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "developmentInfo": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "display_title": {
                    "type": "string"
                },
                "gpuImageSet": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "icon_name": {
                    "type": "string"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "status": {
                    "type": "string"
                },
                "volume_mounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/open-hydra-server-api_pkg_open-hydra_apis.VolumeMount"
                    }
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/open-hydra-server-api_pkg_open-hydra_apis.Volume"
                    }
                }
            }
        },
        "open-hydra-server-api_pkg_open-hydra_apis.Volume": {
            "type": "object",
            "properties": {
                "empty_dir": {
                    "$ref": "#/definitions/open-hydra-server-api_pkg_open-hydra_apis.EmptyDir"
                },
                "host_path": {
                    "$ref": "#/definitions/open-hydra-server-api_pkg_open-hydra_apis.HostPath"
                }
            }
        },
        "open-hydra-server-api_pkg_open-hydra_apis.VolumeMount": {
            "type": "object",
            "properties": {
                "mount_path": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "read_only": {
                    "type": "boolean"
                },
                "source_path": {
                    "type": "string"
                }
            }
        },
        "route.CustomErrorUsersAddToGroup": {
            "type": "object",
            "properties": {
                "failed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.CoreUser"
                    }
                },
                "successes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.CoreUser"
                    }
                }
            }
        },
        "south.RayDeployment": {
            "type": "object",
            "properties": {
                "VllmDeployment": {
                    "$ref": "#/definitions/south.RayVLLMDeployment"
                }
            }
        },
        "south.RayReplicaStates": {
            "type": "object",
            "properties": {
                "RUNNING": {
                    "type": "integer"
                },
                "STARTING": {
                    "type": "integer"
                }
            }
        },
        "south.RayVLLMDeployment": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "replica_states": {
                    "$ref": "#/definitions/south.RayReplicaStates"
                },
                "status": {
                    "type": "string"
                },
                "status_trigger": {
                    "type": "string"
                }
            }
        },
        "v1.Affinity": {
            "type": "object",
            "properties": {
                "nodeAffinity": {
                    "description": "Describes node affinity scheduling rules for the pod.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeAffinity"
                        }
                    ]
                },
                "podAffinity": {
                    "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodAffinity"
                        }
                    ]
                },
                "podAntiAffinity": {
                    "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodAntiAffinity"
                        }
                    ]
                }
            }
        },
        "v1.ChatPost": {
            "type": "object",
            "properties": {
                "conversation_id": {
                    "type": "string"
                },
                "history_len": {
                    "type": "integer"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Message"
                    }
                },
                "model": {
                    "type": "string"
                },
                "query": {
                    "type": "string"
                },
                "stream": {
                    "type": "boolean"
                },
                "temperature": {
                    "type": "number"
                }
            }
        },
        "v1.ChatQuickStart": {
            "type": "object",
            "properties": {
                "files": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "query": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "v1.ChatQuickStarts": {
            "type": "object",
            "properties": {
                "chat_quick_starts": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/v1.ChatQuickStart"
                        }
                    }
                }
            }
        },
        "v1.Conversation": {
            "type": "object",
            "properties": {
                "chat_type": {
                    "type": "string"
                },
                "create_time": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "temp_file_name": {
                    "type": "string"
                },
                "temp_kb_id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "v1.ConversationMessage": {
            "type": "object",
            "properties": {
                "chat_type": {
                    "type": "string"
                },
                "conversation_id": {
                    "type": "string"
                },
                "create_time": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "query": {
                    "type": "string"
                },
                "response": {
                    "type": "string"
                },
                "temp_file_name": {
                    "type": "string"
                },
                "temp_kb_id": {
                    "type": "string"
                }
            }
        },
        "v1.CoreGroup": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "tagColor": {
                    "type": "string"
                }
            }
        },
        "v1.CoreGroupSummary": {
            "type": "object",
            "properties": {
                "counts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.CoreGroupSummaryDetail"
                    }
                }
            }
        },
        "v1.CoreGroupSummaryDetail": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "v1.CoreRole": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "permission": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "uneditable": {
                    "type": "boolean"
                }
            }
        },
        "v1.CoreUser": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.CoreGroup"
                    }
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "permission": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.CoreRole"
                    }
                },
                "uneditable": {
                    "type": "boolean"
                }
            }
        },
        "v1.FieldsV1": {
            "type": "object"
        },
        "v1.FileChatPost": {
            "type": "object",
            "properties": {
                "conversation_id": {
                    "type": "string"
                },
                "history_len": {
                    "type": "integer"
                },
                "knowledge_id": {
                    "type": "string"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Message"
                    }
                },
                "model": {
                    "type": "string"
                },
                "query": {
                    "type": "string"
                },
                "stream": {
                    "type": "boolean"
                },
                "temperature": {
                    "type": "number"
                }
            }
        },
        "v1.Flavor": {
            "type": "object",
            "properties": {
                "plugin": {
                    "$ref": "#/definitions/open-hydra-server-api_pkg_open-hydra_apis.PluginList"
                },
                "sumUps": {
                    "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_summary_core_v1.SumUp"
                }
            }
        },
        "v1.KbChatPost": {
            "type": "object",
            "properties": {
                "conversation_id": {
                    "type": "string"
                },
                "history_len": {
                    "type": "integer"
                },
                "kb_id": {
                    "type": "string"
                },
                "kb_name": {
                    "type": "string"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Message"
                    }
                },
                "model": {
                    "type": "string"
                },
                "query": {
                    "type": "string"
                },
                "score_threshold": {
                    "type": "number"
                },
                "stream": {
                    "type": "boolean"
                },
                "temperature": {
                    "type": "number"
                },
                "top_k": {
                    "type": "integer"
                }
            }
        },
        "v1.KnowledgeBase": {
            "type": "object",
            "properties": {
                "chunk_overlap": {
                    "type": "integer"
                },
                "chunk_size": {
                    "type": "integer"
                },
                "create_time": {
                    "type": "string"
                },
                "embed_model": {
                    "type": "string"
                },
                "file_count": {
                    "type": "integer"
                },
                "is_private": {
                    "type": "boolean"
                },
                "kb_id": {
                    "type": "string"
                },
                "kb_info": {
                    "type": "string"
                },
                "kb_name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "vector_store_type": {
                    "type": "string"
                },
                "vs_type": {
                    "type": "string"
                }
            }
        },
        "v1.KnowledgeBaseCommonResult": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "v1.KnowledgeBaseFileList": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.knowledgeBaseFileDetail"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "v1.KnowledgeBaseFilesToDelete": {
            "type": "object",
            "properties": {
                "file_names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.LabelSelector": {
            "type": "object",
            "properties": {
                "matchExpressions": {
                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.LabelSelectorRequirement"
                    }
                },
                "matchLabels": {
                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.LabelSelectorOperator": {
            "type": "string",
            "enum": [
                "In",
                "NotIn",
                "Exists",
                "DoesNotExist"
            ],
            "x-enum-varnames": [
                "LabelSelectorOpIn",
                "LabelSelectorOpNotIn",
                "LabelSelectorOpExists",
                "LabelSelectorOpDoesNotExist"
            ]
        },
        "v1.LabelSelectorRequirement": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                },
                "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelectorOperator"
                        }
                    ]
                },
                "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.ManagedFieldsEntry": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the version of this resource that this field set\napplies to. The format is \"group/version\" just like the top-level\nAPIVersion field. It is necessary to track the version of a field\nset because it cannot be automatically converted.",
                    "type": "string"
                },
                "fieldsType": {
                    "description": "FieldsType is the discriminator for the different fields format and version.\nThere is currently only one possible value: \"FieldsV1\"",
                    "type": "string"
                },
                "fieldsV1": {
                    "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.FieldsV1"
                        }
                    ]
                },
                "manager": {
                    "description": "Manager is an identifier of the workflow managing these fields.",
                    "type": "string"
                },
                "operation": {
                    "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created.\nThe only valid values for this field are 'Apply' and 'Update'.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ManagedFieldsOperationType"
                        }
                    ]
                },
                "subresource": {
                    "description": "Subresource is the name of the subresource used to update that object, or\nempty string if the object was updated through the main resource. The\nvalue of this field is used to distinguish between managers, even if they\nshare the same name. For example, a status update will be distinct from a\nregular update using the same manager name.\nNote that the APIVersion field is not related to the Subresource field and\nit always corresponds to the version of the main resource.",
                    "type": "string"
                },
                "time": {
                    "description": "Time is the timestamp of when the ManagedFields entry was added. The\ntimestamp will also be updated if a field is added, the manager\nchanges any of the owned fields value or removes a field. The\ntimestamp does not update when a field is removed from the entry\nbecause another manager took it over.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ManagedFieldsOperationType": {
            "type": "string",
            "enum": [
                "Apply",
                "Update"
            ],
            "x-enum-varnames": [
                "ManagedFieldsOperationApply",
                "ManagedFieldsOperationUpdate"
            ]
        },
        "v1.Message": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "v1.NodeAffinity": {
            "type": "object",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node matches the corresponding matchExpressions; the\nnode(s) with the highest sum are the most preferred.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PreferredSchedulingTerm"
                    }
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to an update), the system\nmay or may not try to eventually evict the pod from its node.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeSelector"
                        }
                    ]
                }
            }
        },
        "v1.NodeSelector": {
            "type": "object",
            "properties": {
                "nodeSelectorTerms": {
                    "description": "Required. A list of node selector terms. The terms are ORed.\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.NodeSelectorTerm"
                    }
                }
            }
        },
        "v1.NodeSelectorOperator": {
            "type": "string",
            "enum": [
                "In",
                "NotIn",
                "Exists",
                "DoesNotExist",
                "Gt",
                "Lt"
            ],
            "x-enum-varnames": [
                "NodeSelectorOpIn",
                "NodeSelectorOpNotIn",
                "NodeSelectorOpExists",
                "NodeSelectorOpDoesNotExist",
                "NodeSelectorOpGt",
                "NodeSelectorOpLt"
            ]
        },
        "v1.NodeSelectorRequirement": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "The label key that the selector applies to.",
                    "type": "string"
                },
                "operator": {
                    "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeSelectorOperator"
                        }
                    ]
                },
                "values": {
                    "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.NodeSelectorTerm": {
            "type": "object",
            "properties": {
                "matchExpressions": {
                    "description": "A list of node selector requirements by node's labels.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.NodeSelectorRequirement"
                    }
                },
                "matchFields": {
                    "description": "A list of node selector requirements by node's fields.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.NodeSelectorRequirement"
                    }
                }
            }
        },
        "v1.ObjectMeta": {
            "type": "object",
            "properties": {
                "annotations": {
                    "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "creationTimestamp": {
                    "description": "CreationTimestamp is a timestamp representing the server time when this object was\ncreated. It is not guaranteed to be set in happens-before order across separate operations.\nClients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system.\nRead-only.\nNull for lists.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "type": "string"
                },
                "deletionGracePeriodSeconds": {
                    "description": "Number of seconds allowed for this object to gracefully terminate before\nit will be removed from the system. Only set when deletionTimestamp is also set.\nMay only be shortened.\nRead-only.\n+optional",
                    "type": "integer"
                },
                "deletionTimestamp": {
                    "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\nfield is set by the server when a graceful deletion is requested by the user, and is not\ndirectly settable by a client. The resource is expected to be deleted (no longer visible\nfrom resource lists, and not reachable by name) after the time in this field, once the\nfinalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\nOnce the deletionTimestamp is set, this value may not be unset or be set further into the\nfuture, although it may be shortened or the resource may be deleted prior to this time.\nFor example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\nby sending a graceful termination signal to the containers in the pod. After that 30 seconds,\nthe Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\nremove the pod from the API. In the presence of network partitions, this object may still\nexist after this timestamp, until an administrator or automated process can determine the\nresource is fully terminated.\nIf not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "type": "string"
                },
                "finalizers": {
                    "description": "Must be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\nFinalizers may be processed and removed in any order.  Order is NOT enforced\nbecause it introduces significant risk of stuck finalizers.\nfinalizers is a shared field, any actor with permission can reorder it.\nIf the finalizer list is processed in order, then this can lead to a situation\nin which the component responsible for the first finalizer in the list is\nwaiting for a signal (field value, external system, or other) produced by a\ncomponent responsible for a finalizer later in the list, resulting in a deadlock.\nWithout enforced ordering finalizers are free to order amongst themselves and\nare not vulnerable to ordering changes in the list.\n+optional\n+patchStrategy=merge\n+listType=set",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "generateName": {
                    "description": "GenerateName is an optional prefix, used by the server, to generate a unique\nname ONLY IF the Name field has not been provided.\nIf this field is used, the name returned to the client will be different\nthan the name passed. This value will also be combined with a unique suffix.\nThe provided value has the same validation rules as the Name field,\nand may be truncated by the length of the suffix required to make the value\nunique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n+optional",
                    "type": "string"
                },
                "generation": {
                    "description": "A sequence number representing a specific generation of the desired state.\nPopulated by the system. Read-only.\n+optional",
                    "type": "integer"
                },
                "labels": {
                    "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "managedFields": {
                    "description": "ManagedFields maps workflow-id and version to the set of fields\nthat are managed by that workflow. This is mostly for internal\nhousekeeping, and users typically shouldn't need to set or\nunderstand this field. A workflow can be the user's name, a\ncontroller's name, or the name of a specific apply path like\n\"ci-cd\". The set of fields is always in the version that the\nworkflow used when modifying the object.\n\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ManagedFieldsEntry"
                    }
                },
                "name": {
                    "description": "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names\n+optional",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace defines the space within which each name must be unique. An empty namespace is\nequivalent to the \"default\" namespace, but \"default\" is the canonical representation.\nNot all objects are required to be scoped to a namespace - the value of this field for\nthose objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces\n+optional",
                    "type": "string"
                },
                "ownerReferences": {
                    "description": "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\nthen an entry in this list will point to this controller, with the controller field set to true.\nThere cannot be more than one managing controller.\n+optional\n+patchMergeKey=uid\n+patchStrategy=merge\n+listType=map\n+listMapKey=uid",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.OwnerReference"
                    }
                },
                "resourceVersion": {
                    "description": "An opaque value that represents the internal version of this object that can\nbe used by clients to determine when objects have changed. May be used for optimistic\nconcurrency, change detection, and the watch operation on a resource or set of resources.\nClients must treat these values as opaque and passed unmodified back to the server.\nThey may only be valid for a particular resource or set of resources.\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional",
                    "type": "string"
                },
                "selfLink": {
                    "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.\n+optional",
                    "type": "string"
                },
                "uid": {
                    "description": "UID is the unique in time and space value for this object. It is typically generated by\nthe server on successful creation of a resource and is not allowed to change on PUT\noperations.\n\nPopulated by the system.\nRead-only.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.OwnerReference": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "API version of the referent.",
                    "type": "string"
                },
                "blockOwnerDeletion": {
                    "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then\nthe owner cannot be deleted from the key-value store until this\nreference is removed.\nSee https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion\nfor how the garbage collector interacts with this field and enforces the foreground deletion.\nDefaults to false.\nTo set this field, a user needs \"delete\" permission of the owner,\notherwise 422 (Unprocessable Entity) will be returned.\n+optional",
                    "type": "boolean"
                },
                "controller": {
                    "description": "If true, this reference points to the managing controller.\n+optional",
                    "type": "boolean"
                },
                "kind": {
                    "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                    "type": "string"
                },
                "uid": {
                    "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                    "type": "string"
                }
            }
        },
        "v1.PodAffinity": {
            "type": "object",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.WeightedPodAffinityTerm"
                    }
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PodAffinityTerm"
                    }
                }
            }
        },
        "v1.PodAffinityTerm": {
            "type": "object",
            "properties": {
                "labelSelector": {
                    "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelector"
                        }
                    ]
                },
                "matchLabelKeys": {
                    "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mismatchLabelKeys": {
                    "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "namespaceSelector": {
                    "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelector"
                        }
                    ]
                },
                "namespaces": {
                    "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "topologyKey": {
                    "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                    "type": "string"
                }
            }
        },
        "v1.PodAntiAffinity": {
            "type": "object",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe anti-affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.WeightedPodAffinityTerm"
                    }
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "description": "If the anti-affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the anti-affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PodAffinityTerm"
                    }
                }
            }
        },
        "v1.PreferredSchedulingTerm": {
            "type": "object",
            "properties": {
                "preference": {
                    "description": "A node selector term, associated with the corresponding weight.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeSelectorTerm"
                        }
                    ]
                },
                "weight": {
                    "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                    "type": "integer"
                }
            }
        },
        "v1.Summary": {
            "type": "object",
            "properties": {
                "gpuResourceShare": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "gpuResourceSumUp": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_summary_core_v1.GpuResourceSumUp"
                    }
                },
                "openHydraConfig": {
                    "$ref": "#/definitions/open-hydra-server-api_cmd_open-hydra-server_app_config.OpenHydraServerConfig"
                },
                "setting": {
                    "$ref": "#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_setting_core_v1.Setting"
                },
                "totalCpuAllocatable": {
                    "type": "integer"
                },
                "totalCpuAllocatableRaft": {
                    "type": "integer"
                },
                "totalCpuLimitAllocated": {
                    "type": "integer"
                },
                "totalCpuLimitAllocatedRaft": {
                    "type": "integer"
                },
                "totalCpuRequestAllocated": {
                    "type": "integer"
                },
                "totalCpuRequestAllocatedRaft": {
                    "type": "integer"
                },
                "totalCpuUnit": {
                    "type": "string"
                },
                "totalGpuAllocatable": {
                    "type": "integer"
                },
                "totalGpuAllocated": {
                    "type": "integer"
                },
                "totalNodes": {
                    "type": "integer"
                },
                "totalNodesCanUse": {
                    "type": "integer"
                },
                "totalRamAllocatable": {
                    "type": "integer"
                },
                "totalRamAllocatableRaft": {
                    "type": "integer"
                },
                "totalRamLimitAllocated": {
                    "type": "integer"
                },
                "totalRamLimitAllocatedRaft": {
                    "type": "integer"
                },
                "totalRamRequestAllocated": {
                    "type": "integer"
                },
                "totalRamRequestAllocatedRaft": {
                    "type": "integer"
                },
                "totalRamUnit": {
                    "type": "string"
                }
            }
        },
        "v1.SystemInfo": {
            "type": "object",
            "properties": {
                "company": {
                    "type": "string"
                },
                "cpu": {
                    "type": "string"
                },
                "end": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "license": {
                    "type": "string"
                },
                "licenseValid": {
                    "type": "boolean"
                },
                "mac_address": {
                    "type": "string"
                },
                "modules": {
                    "type": "string"
                },
                "node": {
                    "type": "string"
                },
                "product": {
                    "type": "string"
                },
                "systemProduct": {
                    "type": "string"
                },
                "systemVersion": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "v1.VersionInfo": {
            "type": "object",
            "properties": {
                "fun": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "gitVersion": {
                    "type": "string"
                },
                "releaseVersion": {
                    "type": "string"
                }
            }
        },
        "v1.WeightedPodAffinityTerm": {
            "type": "object",
            "properties": {
                "podAffinityTerm": {
                    "description": "Required. A pod affinity term, associated with the corresponding weight.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodAffinityTerm"
                        }
                    ]
                },
                "weight": {
                    "description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.",
                    "type": "integer"
                }
            }
        },
        "v1.WrapperSandbox": {
            "type": "object",
            "properties": {
                "runningSandboxName": {
                    "type": "string"
                },
                "sandboxes": {
                    "$ref": "#/definitions/open-hydra-server-api_pkg_open-hydra_apis.PluginList"
                }
            }
        },
        "v1.XInferenceModel": {
            "type": "object",
            "properties": {
                "accelerators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "address": {
                    "type": "string"
                },
                "context_length": {
                    "type": "integer"
                },
                "created": {
                    "type": "integer"
                },
                "dimensions": {
                    "type": "integer"
                },
                "gpu_memory_utilization": {
                    "description": "should be always less equal than 1",
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "language": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "max_tokens": {
                    "type": "integer"
                },
                "model_ability": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "model_description": {
                    "type": "string"
                },
                "model_family": {
                    "type": "string"
                },
                "model_format": {
                    "type": "string"
                },
                "model_hub": {
                    "type": "string"
                },
                "model_lang": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "model_name": {
                    "type": "string"
                },
                "model_revision": {
                    "type": "string"
                },
                "model_size_in_billions": {
                    "type": "integer"
                },
                "model_type": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "owned_by": {
                    "type": "string"
                },
                "quantization": {
                    "type": "string"
                },
                "replica": {
                    "type": "integer"
                },
                "revision": {
                    "type": "string"
                }
            }
        },
        "v1.XInferenceModelFontLauncher": {
            "type": "object",
            "properties": {
                "model_name": {
                    "type": "string"
                },
                "template": {
                    "type": "string"
                }
            }
        },
        "v1.XInferenceModelList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.XInferenceModel"
                    }
                },
                "object": {
                    "type": "string"
                }
            }
        },
        "v1.knowledgeBaseFileDetail": {
            "type": "object",
            "properties": {
                "create_time": {
                    "type": "string"
                },
                "custom_docs": {
                    "type": "boolean"
                },
                "docs_count": {
                    "type": "integer"
                },
                "document_loader": {
                    "type": "string"
                },
                "file_ext": {
                    "type": "string"
                },
                "file_mtime": {
                    "type": "number"
                },
                "file_name": {
                    "type": "string"
                },
                "file_size": {
                    "type": "integer"
                },
                "file_version": {
                    "type": "integer"
                },
                "in_db": {
                    "type": "boolean"
                },
                "in_folder": {
                    "type": "boolean"
                },
                "kb_name": {
                    "type": "string"
                },
                "no": {
                    "type": "integer"
                },
                "text_splitter": {
                    "type": "string"
                }
            }
        }
    }
}