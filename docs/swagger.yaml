definitions:
  http.CustomError:
    properties:
      customErrCode:
        type: string
      data:
        $ref: '#/definitions/http.FileUploadFailedResponse'
      message:
        type: string
    type: object
  http.FileUploadFailedResponse:
    properties:
      failed_files:
        items:
          properties:
            filename:
              type: string
            msg:
              type: string
          type: object
        type: array
      id:
        type: string
      succeeded_files:
        items:
          properties:
            filename:
              type: string
          type: object
        type: array
    type: object
  open-hydra-server-api_cmd_open-hydra-server_app_config.AuthDelegateConfig:
    properties:
      keystone_config:
        allOf:
        - $ref: '#/definitions/open-hydra-server-api_cmd_open-hydra-server_app_config.KeystoneConfig'
        description: if KeystoneConfig is set to nil then auth plugin will fall backup
          to database auth
    type: object
  open-hydra-server-api_cmd_open-hydra-server_app_config.EtcdConfig:
    properties:
      ca_file:
        type: string
      cert_file:
        type: string
      endpoints:
        items:
          type: string
        type: array
      key_file:
        type: string
    type: object
  open-hydra-server-api_cmd_open-hydra-server_app_config.KeystoneConfig:
    properties:
      domain_id:
        type: string
      endpoint:
        type: string
      password:
        type: string
      project_id:
        type: string
      token_key_in_request:
        type: string
      token_key_in_response:
        type: string
      username:
        type: string
    type: object
  open-hydra-server-api_cmd_open-hydra-server_app_config.MySqlConfig:
    properties:
      address:
        type: string
      character:
        type: string
      collation:
        type: string
      database_name:
        type: string
      password:
        type: string
      port:
        type: integer
      protocol:
        type: string
      username:
        type: string
    type: object
  open-hydra-server-api_cmd_open-hydra-server_app_config.OpenHydraServerConfig:
    properties:
      auth_delegate_config:
        $ref: '#/definitions/open-hydra-server-api_cmd_open-hydra-server_app_config.AuthDelegateConfig'
      course_base_path:
        type: string
      course_max_size:
        type: integer
      course_student_mount_path:
        type: string
      cpu_over_commit_rate:
        type: integer
      dataset_base_path:
        description: |-
          default = "/open-hydra/public-dataset"
          all dataset upload by user will be store in this path
        type: string
      dataset_max_size:
        type: integer
      dataset_student_mount_path:
        description: default = "/root/public-dataset"
        type: string
      dataset_volume_type:
        description: |-
          default = "hostpath", hostpath or nfs
          hostpath: open-hydra-server will use hostpath to mount dataset most likely for aio server or test
          nfs: open-hydra-server will use nfs to mount dataset most likely for production
        type: string
      db_type:
        type: string
      default_cpu_per_device:
        description: |-
          default = 2000
          note unit is m
        type: integer
      default_gpu_driver:
        description: |-
          should be no default value but fill it in installation script, because it is a runtime value
          if not set we won't be able to start gpu pod at all
        type: string
      default_gpu_per_device:
        description: default = 0
        type: integer
      default_ram_per_device:
        description: |-
          default = 8192
          note unit is Mi
        type: integer
      disable_auth:
        type: boolean
      etcd_config:
        $ref: '#/definitions/open-hydra-server-api_cmd_open-hydra-server_app_config.EtcdConfig'
      gpu_resource_keys:
        description: gpu resource keys that predefine for open-hydra-server to discover
          gpu resource
        items:
          type: string
        type: array
      maximum_ports_per_sandbox:
        type: integer
      memory_over_commit_rate:
        type: integer
      mysql_config:
        $ref: '#/definitions/open-hydra-server-api_cmd_open-hydra-server_app_config.MySqlConfig'
      patch_resource_not_release:
        type: boolean
      pod_allocatable_limit:
        description: |-
          in case of we want to control total pod number in cluster
          -1 not limit pod allocatable will be count by resource wise
        type: integer
      server_ip:
        type: string
      workspace_path:
        type: string
    type: object
  open-hydra-server-api_pkg_apis_open-hydra-api_course_core_v1.Course:
    properties:
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      metadata:
        $ref: '#/definitions/v1.ObjectMeta'
      spec:
        $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_course_core_v1.CourseSpec'
      status:
        $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_course_core_v1.CourseStatus'
    type: object
  open-hydra-server-api_pkg_apis_open-hydra-api_course_core_v1.CourseSpec:
    properties:
      createdBy:
        type: string
      description:
        type: string
      lastUpdate:
        type: string
      level:
        type: integer
      sandboxName:
        type: string
      size:
        type: integer
    type: object
  open-hydra-server-api_pkg_apis_open-hydra-api_course_core_v1.CourseStatus:
    type: object
  open-hydra-server-api_pkg_apis_open-hydra-api_dataset_core_v1.Dataset:
    properties:
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      metadata:
        $ref: '#/definitions/v1.ObjectMeta'
      spec:
        $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_dataset_core_v1.DatasetSpec'
      status:
        $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_dataset_core_v1.DatasetStatus'
    type: object
  open-hydra-server-api_pkg_apis_open-hydra-api_dataset_core_v1.DatasetSpec:
    properties:
      description:
        type: string
      lastUpdate:
        type: string
    type: object
  open-hydra-server-api_pkg_apis_open-hydra-api_dataset_core_v1.DatasetStatus:
    type: object
  open-hydra-server-api_pkg_apis_open-hydra-api_device_core_v1.Device:
    properties:
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      metadata:
        $ref: '#/definitions/v1.ObjectMeta'
      spec:
        $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_device_core_v1.DeviceSpec'
      status:
        $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_device_core_v1.DeviceStatus'
    type: object
  open-hydra-server-api_pkg_apis_open-hydra-api_device_core_v1.DeviceSpec:
    properties:
      affinity:
        $ref: '#/definitions/v1.Affinity'
      chineseName:
        type: string
      deviceCpu:
        type: string
      deviceGpu:
        type: integer
      deviceIP:
        type: string
      deviceName:
        type: string
      deviceNamespace:
        type: string
      deviceRam:
        type: string
      deviceStatus:
        type: string
      deviceType:
        type: string
      gpuDriver:
        type: string
      lineNo:
        type: string
      openHydraUsername:
        type: string
      role:
        type: integer
      sandboxName:
        type: string
      sandboxURLs:
        type: string
      usePublicDataSet:
        type: boolean
    type: object
  open-hydra-server-api_pkg_apis_open-hydra-api_device_core_v1.DeviceStatus:
    type: object
  open-hydra-server-api_pkg_apis_open-hydra-api_setting_core_v1.Setting:
    properties:
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      metadata:
        $ref: '#/definitions/v1.ObjectMeta'
      spec:
        $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_setting_core_v1.SettingSpec'
      status:
        $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_setting_core_v1.SettingStatus'
    type: object
  open-hydra-server-api_pkg_apis_open-hydra-api_setting_core_v1.SettingSpec:
    properties:
      default_gpu_per_device:
        type: integer
      plugin_list:
        $ref: '#/definitions/open-hydra-server-api_pkg_open-hydra_apis.PluginList'
    type: object
  open-hydra-server-api_pkg_apis_open-hydra-api_setting_core_v1.SettingStatus:
    type: object
  open-hydra-server-api_pkg_apis_open-hydra-api_summary_core_v1.GpuResourceSumUp:
    properties:
      allocatable:
        type: integer
      allocated:
        type: integer
    type: object
  open-hydra-server-api_pkg_apis_open-hydra-api_summary_core_v1.SumUp:
    properties:
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
          +optional
        type: string
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          +optional
        type: string
      metadata:
        $ref: '#/definitions/v1.ObjectMeta'
      spec:
        $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_summary_core_v1.SumUpSpec'
      status:
        $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_summary_core_v1.SumUpStatus'
    type: object
  open-hydra-server-api_pkg_apis_open-hydra-api_summary_core_v1.SumUpSpec:
    properties:
      defaultCpuPerDevice:
        type: string
      defaultGpuPerDevice:
        type: integer
      defaultRamPerDevice:
        type: string
      gpuAllocatable:
        type: string
      gpuAllocated:
        type: string
      gpuResourceSumUp:
        additionalProperties:
          $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_summary_core_v1.GpuResourceSumUp'
        type: object
      podAllocatable:
        type: integer
      podAllocated:
        type: integer
      totalLine:
        type: integer
    type: object
  open-hydra-server-api_pkg_apis_open-hydra-api_summary_core_v1.SumUpStatus:
    type: object
  open-hydra-server-api_pkg_open-hydra_apis.EmptyDir:
    properties:
      medium:
        type: string
      name:
        type: string
      size_limit:
        type: integer
    type: object
  open-hydra-server-api_pkg_open-hydra_apis.HostPath:
    properties:
      name:
        type: string
      path:
        type: string
      type:
        type: string
    type: object
  open-hydra-server-api_pkg_open-hydra_apis.PluginList:
    properties:
      defaultSandbox:
        type: string
      sandboxes:
        additionalProperties:
          $ref: '#/definitions/open-hydra-server-api_pkg_open-hydra_apis.Sandbox'
        type: object
    type: object
  open-hydra-server-api_pkg_open-hydra_apis.Sandbox:
    properties:
      args:
        items:
          type: string
        type: array
      command:
        items:
          type: string
        type: array
      cpuImageName:
        type: string
      description:
        type: string
      developmentInfo:
        items:
          type: string
        type: array
      display_title:
        type: string
      gpuImageSet:
        additionalProperties:
          type: string
        type: object
      icon_name:
        type: string
      ports:
        items:
          type: integer
        type: array
      status:
        type: string
      volume_mounts:
        items:
          $ref: '#/definitions/open-hydra-server-api_pkg_open-hydra_apis.VolumeMount'
        type: array
      volumes:
        items:
          $ref: '#/definitions/open-hydra-server-api_pkg_open-hydra_apis.Volume'
        type: array
    type: object
  open-hydra-server-api_pkg_open-hydra_apis.Volume:
    properties:
      empty_dir:
        $ref: '#/definitions/open-hydra-server-api_pkg_open-hydra_apis.EmptyDir'
      host_path:
        $ref: '#/definitions/open-hydra-server-api_pkg_open-hydra_apis.HostPath'
    type: object
  open-hydra-server-api_pkg_open-hydra_apis.VolumeMount:
    properties:
      mount_path:
        type: string
      name:
        type: string
      read_only:
        type: boolean
      source_path:
        type: string
    type: object
  route.CustomErrorUsersAddToGroup:
    properties:
      failed:
        items:
          $ref: '#/definitions/v1.CoreUser'
        type: array
      successes:
        items:
          $ref: '#/definitions/v1.CoreUser'
        type: array
    type: object
  south.RayDeployment:
    properties:
      VllmDeployment:
        $ref: '#/definitions/south.RayVLLMDeployment'
    type: object
  south.RayReplicaStates:
    properties:
      RUNNING:
        type: integer
      STARTING:
        type: integer
    type: object
  south.RayVLLMDeployment:
    properties:
      message:
        type: string
      replica_states:
        $ref: '#/definitions/south.RayReplicaStates'
      status:
        type: string
      status_trigger:
        type: string
    type: object
  v1.Affinity:
    properties:
      nodeAffinity:
        allOf:
        - $ref: '#/definitions/v1.NodeAffinity'
        description: |-
          Describes node affinity scheduling rules for the pod.
          +optional
      podAffinity:
        allOf:
        - $ref: '#/definitions/v1.PodAffinity'
        description: |-
          Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
          +optional
      podAntiAffinity:
        allOf:
        - $ref: '#/definitions/v1.PodAntiAffinity'
        description: |-
          Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
          +optional
    type: object
  v1.ChatPost:
    properties:
      conversation_id:
        type: string
      history_len:
        type: integer
      messages:
        items:
          $ref: '#/definitions/v1.Message'
        type: array
      model:
        type: string
      query:
        type: string
      stream:
        type: boolean
      temperature:
        type: number
    type: object
  v1.ChatQuickStart:
    properties:
      files:
        items:
          type: string
        type: array
      name:
        type: string
      query:
        type: string
      title:
        type: string
    type: object
  v1.ChatQuickStarts:
    properties:
      chat_quick_starts:
        additionalProperties:
          items:
            $ref: '#/definitions/v1.ChatQuickStart'
          type: array
        type: object
    type: object
  v1.Conversation:
    properties:
      chat_type:
        type: string
      create_time:
        type: string
      id:
        type: string
      name:
        type: string
      temp_file_name:
        type: string
      temp_kb_id:
        type: string
      user_id:
        type: string
    type: object
  v1.ConversationMessage:
    properties:
      chat_type:
        type: string
      conversation_id:
        type: string
      create_time:
        type: string
      id:
        type: string
      query:
        type: string
      response:
        type: string
      temp_file_name:
        type: string
      temp_kb_id:
        type: string
    type: object
  v1.CoreGroup:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
      tagColor:
        type: string
    type: object
  v1.CoreGroupSummary:
    properties:
      counts:
        items:
          $ref: '#/definitions/v1.CoreGroupSummaryDetail'
        type: array
    type: object
  v1.CoreGroupSummaryDetail:
    properties:
      count:
        type: integer
      id:
        type: string
      name:
        type: string
    type: object
  v1.CoreRole:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
      permission:
        additionalProperties:
          type: integer
        type: object
      uneditable:
        type: boolean
    type: object
  v1.CoreUser:
    properties:
      description:
        type: string
      email:
        type: string
      groups:
        items:
          $ref: '#/definitions/v1.CoreGroup'
        type: array
      id:
        type: string
      name:
        type: string
      password:
        type: string
      permission:
        additionalProperties:
          type: integer
        type: object
      roles:
        items:
          $ref: '#/definitions/v1.CoreRole'
        type: array
      uneditable:
        type: boolean
    type: object
  v1.FieldsV1:
    type: object
  v1.FileChatPost:
    properties:
      conversation_id:
        type: string
      history_len:
        type: integer
      knowledge_id:
        type: string
      messages:
        items:
          $ref: '#/definitions/v1.Message'
        type: array
      model:
        type: string
      query:
        type: string
      stream:
        type: boolean
      temperature:
        type: number
    type: object
  v1.Flavor:
    properties:
      plugin:
        $ref: '#/definitions/open-hydra-server-api_pkg_open-hydra_apis.PluginList'
      sumUps:
        $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_summary_core_v1.SumUp'
    type: object
  v1.KbChatPost:
    properties:
      conversation_id:
        type: string
      history_len:
        type: integer
      kb_id:
        type: string
      kb_name:
        type: string
      messages:
        items:
          $ref: '#/definitions/v1.Message'
        type: array
      model:
        type: string
      query:
        type: string
      score_threshold:
        type: number
      stream:
        type: boolean
      temperature:
        type: number
      top_k:
        type: integer
    type: object
  v1.KnowledgeBase:
    properties:
      chunk_overlap:
        type: integer
      chunk_size:
        type: integer
      create_time:
        type: string
      embed_model:
        type: string
      file_count:
        type: integer
      is_private:
        type: boolean
      kb_id:
        type: string
      kb_info:
        type: string
      kb_name:
        type: string
      user_id:
        type: string
      username:
        type: string
      vector_store_type:
        type: string
      vs_type:
        type: string
    type: object
  v1.KnowledgeBaseCommonResult:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  v1.KnowledgeBaseFileList:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/v1.knowledgeBaseFileDetail'
        type: array
      message:
        type: string
    type: object
  v1.KnowledgeBaseFilesToDelete:
    properties:
      file_names:
        items:
          type: string
        type: array
    type: object
  v1.LabelSelector:
    properties:
      matchExpressions:
        description: |-
          matchExpressions is a list of label selector requirements. The requirements are ANDed.
          +optional
          +listType=atomic
        items:
          $ref: '#/definitions/v1.LabelSelectorRequirement'
        type: array
      matchLabels:
        additionalProperties:
          type: string
        description: |-
          matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
          map is equivalent to an element of matchExpressions, whose key field is "key", the
          operator is "In", and the values array contains only "value". The requirements are ANDed.
          +optional
        type: object
    type: object
  v1.LabelSelectorOperator:
    enum:
    - In
    - NotIn
    - Exists
    - DoesNotExist
    type: string
    x-enum-varnames:
    - LabelSelectorOpIn
    - LabelSelectorOpNotIn
    - LabelSelectorOpExists
    - LabelSelectorOpDoesNotExist
  v1.LabelSelectorRequirement:
    properties:
      key:
        description: key is the label key that the selector applies to.
        type: string
      operator:
        allOf:
        - $ref: '#/definitions/v1.LabelSelectorOperator'
        description: |-
          operator represents a key's relationship to a set of values.
          Valid operators are In, NotIn, Exists and DoesNotExist.
      values:
        description: |-
          values is an array of string values. If the operator is In or NotIn,
          the values array must be non-empty. If the operator is Exists or DoesNotExist,
          the values array must be empty. This array is replaced during a strategic
          merge patch.
          +optional
          +listType=atomic
        items:
          type: string
        type: array
    type: object
  v1.ManagedFieldsEntry:
    properties:
      apiVersion:
        description: |-
          APIVersion defines the version of this resource that this field set
          applies to. The format is "group/version" just like the top-level
          APIVersion field. It is necessary to track the version of a field
          set because it cannot be automatically converted.
        type: string
      fieldsType:
        description: |-
          FieldsType is the discriminator for the different fields format and version.
          There is currently only one possible value: "FieldsV1"
        type: string
      fieldsV1:
        allOf:
        - $ref: '#/definitions/v1.FieldsV1'
        description: |-
          FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
          +optional
      manager:
        description: Manager is an identifier of the workflow managing these fields.
        type: string
      operation:
        allOf:
        - $ref: '#/definitions/v1.ManagedFieldsOperationType'
        description: |-
          Operation is the type of operation which lead to this ManagedFieldsEntry being created.
          The only valid values for this field are 'Apply' and 'Update'.
      subresource:
        description: |-
          Subresource is the name of the subresource used to update that object, or
          empty string if the object was updated through the main resource. The
          value of this field is used to distinguish between managers, even if they
          share the same name. For example, a status update will be distinct from a
          regular update using the same manager name.
          Note that the APIVersion field is not related to the Subresource field and
          it always corresponds to the version of the main resource.
        type: string
      time:
        description: |-
          Time is the timestamp of when the ManagedFields entry was added. The
          timestamp will also be updated if a field is added, the manager
          changes any of the owned fields value or removes a field. The
          timestamp does not update when a field is removed from the entry
          because another manager took it over.
          +optional
        type: string
    type: object
  v1.ManagedFieldsOperationType:
    enum:
    - Apply
    - Update
    type: string
    x-enum-varnames:
    - ManagedFieldsOperationApply
    - ManagedFieldsOperationUpdate
  v1.Message:
    properties:
      content:
        type: string
      role:
        type: string
    type: object
  v1.NodeAffinity:
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: |-
          The scheduler will prefer to schedule pods to nodes that satisfy
          the affinity expressions specified by this field, but it may choose
          a node that violates one or more of the expressions. The node that is
          most preferred is the one with the greatest sum of weights, i.e.
          for each node that meets all of the scheduling requirements (resource
          request, requiredDuringScheduling affinity expressions, etc.),
          compute a sum by iterating through the elements of this field and adding
          "weight" to the sum if the node matches the corresponding matchExpressions; the
          node(s) with the highest sum are the most preferred.
          +optional
          +listType=atomic
        items:
          $ref: '#/definitions/v1.PreferredSchedulingTerm'
        type: array
      requiredDuringSchedulingIgnoredDuringExecution:
        allOf:
        - $ref: '#/definitions/v1.NodeSelector'
        description: |-
          If the affinity requirements specified by this field are not met at
          scheduling time, the pod will not be scheduled onto the node.
          If the affinity requirements specified by this field cease to be met
          at some point during pod execution (e.g. due to an update), the system
          may or may not try to eventually evict the pod from its node.
          +optional
    type: object
  v1.NodeSelector:
    properties:
      nodeSelectorTerms:
        description: |-
          Required. A list of node selector terms. The terms are ORed.
          +listType=atomic
        items:
          $ref: '#/definitions/v1.NodeSelectorTerm'
        type: array
    type: object
  v1.NodeSelectorOperator:
    enum:
    - In
    - NotIn
    - Exists
    - DoesNotExist
    - Gt
    - Lt
    type: string
    x-enum-varnames:
    - NodeSelectorOpIn
    - NodeSelectorOpNotIn
    - NodeSelectorOpExists
    - NodeSelectorOpDoesNotExist
    - NodeSelectorOpGt
    - NodeSelectorOpLt
  v1.NodeSelectorRequirement:
    properties:
      key:
        description: The label key that the selector applies to.
        type: string
      operator:
        allOf:
        - $ref: '#/definitions/v1.NodeSelectorOperator'
        description: |-
          Represents a key's relationship to a set of values.
          Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
      values:
        description: |-
          An array of string values. If the operator is In or NotIn,
          the values array must be non-empty. If the operator is Exists or DoesNotExist,
          the values array must be empty. If the operator is Gt or Lt, the values
          array must have a single element, which will be interpreted as an integer.
          This array is replaced during a strategic merge patch.
          +optional
          +listType=atomic
        items:
          type: string
        type: array
    type: object
  v1.NodeSelectorTerm:
    properties:
      matchExpressions:
        description: |-
          A list of node selector requirements by node's labels.
          +optional
          +listType=atomic
        items:
          $ref: '#/definitions/v1.NodeSelectorRequirement'
        type: array
      matchFields:
        description: |-
          A list of node selector requirements by node's fields.
          +optional
          +listType=atomic
        items:
          $ref: '#/definitions/v1.NodeSelectorRequirement'
        type: array
    type: object
  v1.ObjectMeta:
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          Annotations is an unstructured key value map stored with a resource that may be
          set by external tools to store and retrieve arbitrary metadata. They are not
          queryable and should be preserved when modifying objects.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
          +optional
        type: object
      creationTimestamp:
        description: |-
          CreationTimestamp is a timestamp representing the server time when this object was
          created. It is not guaranteed to be set in happens-before order across separate operations.
          Clients may not set this value. It is represented in RFC3339 form and is in UTC.

          Populated by the system.
          Read-only.
          Null for lists.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
          +optional
        type: string
      deletionGracePeriodSeconds:
        description: |-
          Number of seconds allowed for this object to gracefully terminate before
          it will be removed from the system. Only set when deletionTimestamp is also set.
          May only be shortened.
          Read-only.
          +optional
        type: integer
      deletionTimestamp:
        description: |-
          DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This
          field is set by the server when a graceful deletion is requested by the user, and is not
          directly settable by a client. The resource is expected to be deleted (no longer visible
          from resource lists, and not reachable by name) after the time in this field, once the
          finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.
          Once the deletionTimestamp is set, this value may not be unset or be set further into the
          future, although it may be shortened or the resource may be deleted prior to this time.
          For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react
          by sending a graceful termination signal to the containers in the pod. After that 30 seconds,
          the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,
          remove the pod from the API. In the presence of network partitions, this object may still
          exist after this timestamp, until an administrator or automated process can determine the
          resource is fully terminated.
          If not set, graceful deletion of the object has not been requested.

          Populated by the system when a graceful deletion is requested.
          Read-only.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
          +optional
        type: string
      finalizers:
        description: |-
          Must be empty before the object is deleted from the registry. Each entry
          is an identifier for the responsible component that will remove the entry
          from the list. If the deletionTimestamp of the object is non-nil, entries
          in this list can only be removed.
          Finalizers may be processed and removed in any order.  Order is NOT enforced
          because it introduces significant risk of stuck finalizers.
          finalizers is a shared field, any actor with permission can reorder it.
          If the finalizer list is processed in order, then this can lead to a situation
          in which the component responsible for the first finalizer in the list is
          waiting for a signal (field value, external system, or other) produced by a
          component responsible for a finalizer later in the list, resulting in a deadlock.
          Without enforced ordering finalizers are free to order amongst themselves and
          are not vulnerable to ordering changes in the list.
          +optional
          +patchStrategy=merge
          +listType=set
        items:
          type: string
        type: array
      generateName:
        description: |-
          GenerateName is an optional prefix, used by the server, to generate a unique
          name ONLY IF the Name field has not been provided.
          If this field is used, the name returned to the client will be different
          than the name passed. This value will also be combined with a unique suffix.
          The provided value has the same validation rules as the Name field,
          and may be truncated by the length of the suffix required to make the value
          unique on the server.

          If this field is specified and the generated name exists, the server will return a 409.

          Applied only if Name is not specified.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
          +optional
        type: string
      generation:
        description: |-
          A sequence number representing a specific generation of the desired state.
          Populated by the system. Read-only.
          +optional
        type: integer
      labels:
        additionalProperties:
          type: string
        description: |-
          Map of string keys and values that can be used to organize and categorize
          (scope and select) objects. May match selectors of replication controllers
          and services.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
          +optional
        type: object
      managedFields:
        description: |-
          ManagedFields maps workflow-id and version to the set of fields
          that are managed by that workflow. This is mostly for internal
          housekeeping, and users typically shouldn't need to set or
          understand this field. A workflow can be the user's name, a
          controller's name, or the name of a specific apply path like
          "ci-cd". The set of fields is always in the version that the
          workflow used when modifying the object.

          +optional
          +listType=atomic
        items:
          $ref: '#/definitions/v1.ManagedFieldsEntry'
        type: array
      name:
        description: |-
          Name must be unique within a namespace. Is required when creating resources, although
          some resources may allow a client to request the generation of an appropriate name
          automatically. Name is primarily intended for creation idempotence and configuration
          definition.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
          +optional
        type: string
      namespace:
        description: |-
          Namespace defines the space within which each name must be unique. An empty namespace is
          equivalent to the "default" namespace, but "default" is the canonical representation.
          Not all objects are required to be scoped to a namespace - the value of this field for
          those objects will be empty.

          Must be a DNS_LABEL.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
          +optional
        type: string
      ownerReferences:
        description: |-
          List of objects depended by this object. If ALL objects in the list have
          been deleted, this object will be garbage collected. If this object is managed by a controller,
          then an entry in this list will point to this controller, with the controller field set to true.
          There cannot be more than one managing controller.
          +optional
          +patchMergeKey=uid
          +patchStrategy=merge
          +listType=map
          +listMapKey=uid
        items:
          $ref: '#/definitions/v1.OwnerReference'
        type: array
      resourceVersion:
        description: |-
          An opaque value that represents the internal version of this object that can
          be used by clients to determine when objects have changed. May be used for optimistic
          concurrency, change detection, and the watch operation on a resource or set of resources.
          Clients must treat these values as opaque and passed unmodified back to the server.
          They may only be valid for a particular resource or set of resources.

          Populated by the system.
          Read-only.
          Value must be treated as opaque by clients and .
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          +optional
        type: string
      selfLink:
        description: |-
          Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
          +optional
        type: string
      uid:
        description: |-
          UID is the unique in time and space value for this object. It is typically generated by
          the server on successful creation of a resource and is not allowed to change on PUT
          operations.

          Populated by the system.
          Read-only.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
          +optional
        type: string
    type: object
  v1.OwnerReference:
    properties:
      apiVersion:
        description: API version of the referent.
        type: string
      blockOwnerDeletion:
        description: |-
          If true, AND if the owner has the "foregroundDeletion" finalizer, then
          the owner cannot be deleted from the key-value store until this
          reference is removed.
          See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion
          for how the garbage collector interacts with this field and enforces the foreground deletion.
          Defaults to false.
          To set this field, a user needs "delete" permission of the owner,
          otherwise 422 (Unprocessable Entity) will be returned.
          +optional
        type: boolean
      controller:
        description: |-
          If true, this reference points to the managing controller.
          +optional
        type: boolean
      kind:
        description: |-
          Kind of the referent.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        type: string
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
        type: string
      uid:
        description: |-
          UID of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
        type: string
    type: object
  v1.PodAffinity:
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: |-
          The scheduler will prefer to schedule pods to nodes that satisfy
          the affinity expressions specified by this field, but it may choose
          a node that violates one or more of the expressions. The node that is
          most preferred is the one with the greatest sum of weights, i.e.
          for each node that meets all of the scheduling requirements (resource
          request, requiredDuringScheduling affinity expressions, etc.),
          compute a sum by iterating through the elements of this field and adding
          "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
          node(s) with the highest sum are the most preferred.
          +optional
          +listType=atomic
        items:
          $ref: '#/definitions/v1.WeightedPodAffinityTerm'
        type: array
      requiredDuringSchedulingIgnoredDuringExecution:
        description: |-
          If the affinity requirements specified by this field are not met at
          scheduling time, the pod will not be scheduled onto the node.
          If the affinity requirements specified by this field cease to be met
          at some point during pod execution (e.g. due to a pod label update), the
          system may or may not try to eventually evict the pod from its node.
          When there are multiple elements, the lists of nodes corresponding to each
          podAffinityTerm are intersected, i.e. all terms must be satisfied.
          +optional
          +listType=atomic
        items:
          $ref: '#/definitions/v1.PodAffinityTerm'
        type: array
    type: object
  v1.PodAffinityTerm:
    properties:
      labelSelector:
        allOf:
        - $ref: '#/definitions/v1.LabelSelector'
        description: |-
          A label query over a set of resources, in this case pods.
          If it's null, this PodAffinityTerm matches with no Pods.
          +optional
      matchLabelKeys:
        description: |-
          MatchLabelKeys is a set of pod label keys to select which pods will
          be taken into consideration. The keys are used to lookup values from the
          incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
          to select the group of existing pods which pods will be taken into consideration
          for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
          pod labels will be ignored. The default value is empty.
          The same key is forbidden to exist in both matchLabelKeys and labelSelector.
          Also, matchLabelKeys cannot be set when labelSelector isn't set.
          This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
          +listType=atomic
          +optional
        items:
          type: string
        type: array
      mismatchLabelKeys:
        description: |-
          MismatchLabelKeys is a set of pod label keys to select which pods will
          be taken into consideration. The keys are used to lookup values from the
          incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
          to select the group of existing pods which pods will be taken into consideration
          for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
          pod labels will be ignored. The default value is empty.
          The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
          Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
          This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
          +listType=atomic
          +optional
        items:
          type: string
        type: array
      namespaceSelector:
        allOf:
        - $ref: '#/definitions/v1.LabelSelector'
        description: |-
          A label query over the set of namespaces that the term applies to.
          The term is applied to the union of the namespaces selected by this field
          and the ones listed in the namespaces field.
          null selector and null or empty namespaces list means "this pod's namespace".
          An empty selector ({}) matches all namespaces.
          +optional
      namespaces:
        description: |-
          namespaces specifies a static list of namespace names that the term applies to.
          The term is applied to the union of the namespaces listed in this field
          and the ones selected by namespaceSelector.
          null or empty namespaces list and null namespaceSelector means "this pod's namespace".
          +optional
          +listType=atomic
        items:
          type: string
        type: array
      topologyKey:
        description: |-
          This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
          the labelSelector in the specified namespaces, where co-located is defined as running on a node
          whose value of the label with key topologyKey matches that of any node on which any of the
          selected pods is running.
          Empty topologyKey is not allowed.
        type: string
    type: object
  v1.PodAntiAffinity:
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: |-
          The scheduler will prefer to schedule pods to nodes that satisfy
          the anti-affinity expressions specified by this field, but it may choose
          a node that violates one or more of the expressions. The node that is
          most preferred is the one with the greatest sum of weights, i.e.
          for each node that meets all of the scheduling requirements (resource
          request, requiredDuringScheduling anti-affinity expressions, etc.),
          compute a sum by iterating through the elements of this field and adding
          "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
          node(s) with the highest sum are the most preferred.
          +optional
          +listType=atomic
        items:
          $ref: '#/definitions/v1.WeightedPodAffinityTerm'
        type: array
      requiredDuringSchedulingIgnoredDuringExecution:
        description: |-
          If the anti-affinity requirements specified by this field are not met at
          scheduling time, the pod will not be scheduled onto the node.
          If the anti-affinity requirements specified by this field cease to be met
          at some point during pod execution (e.g. due to a pod label update), the
          system may or may not try to eventually evict the pod from its node.
          When there are multiple elements, the lists of nodes corresponding to each
          podAffinityTerm are intersected, i.e. all terms must be satisfied.
          +optional
          +listType=atomic
        items:
          $ref: '#/definitions/v1.PodAffinityTerm'
        type: array
    type: object
  v1.PreferredSchedulingTerm:
    properties:
      preference:
        allOf:
        - $ref: '#/definitions/v1.NodeSelectorTerm'
        description: A node selector term, associated with the corresponding weight.
      weight:
        description: Weight associated with matching the corresponding nodeSelectorTerm,
          in the range 1-100.
        type: integer
    type: object
  v1.Summary:
    properties:
      gpuResourceShare:
        additionalProperties:
          type: integer
        type: object
      gpuResourceSumUp:
        additionalProperties:
          $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_summary_core_v1.GpuResourceSumUp'
        type: object
      openHydraConfig:
        $ref: '#/definitions/open-hydra-server-api_cmd_open-hydra-server_app_config.OpenHydraServerConfig'
      setting:
        $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_setting_core_v1.Setting'
      totalCpuAllocatable:
        type: integer
      totalCpuAllocatableRaft:
        type: integer
      totalCpuLimitAllocated:
        type: integer
      totalCpuLimitAllocatedRaft:
        type: integer
      totalCpuRequestAllocated:
        type: integer
      totalCpuRequestAllocatedRaft:
        type: integer
      totalCpuUnit:
        type: string
      totalGpuAllocatable:
        type: integer
      totalGpuAllocated:
        type: integer
      totalNodes:
        type: integer
      totalNodesCanUse:
        type: integer
      totalRamAllocatable:
        type: integer
      totalRamAllocatableRaft:
        type: integer
      totalRamLimitAllocated:
        type: integer
      totalRamLimitAllocatedRaft:
        type: integer
      totalRamRequestAllocated:
        type: integer
      totalRamRequestAllocatedRaft:
        type: integer
      totalRamUnit:
        type: string
    type: object
  v1.SystemInfo:
    properties:
      company:
        type: string
      cpu:
        type: string
      end:
        type: string
      error:
        type: string
      license:
        type: string
      licenseValid:
        type: boolean
      mac_address:
        type: string
      modules:
        type: string
      node:
        type: string
      product:
        type: string
      systemProduct:
        type: string
      systemVersion:
        type: string
      version:
        type: string
    type: object
  v1.VersionInfo:
    properties:
      fun:
        additionalProperties:
          type: string
        type: object
      gitVersion:
        type: string
      releaseVersion:
        type: string
    type: object
  v1.WeightedPodAffinityTerm:
    properties:
      podAffinityTerm:
        allOf:
        - $ref: '#/definitions/v1.PodAffinityTerm'
        description: Required. A pod affinity term, associated with the corresponding
          weight.
      weight:
        description: |-
          weight associated with matching the corresponding podAffinityTerm,
          in the range 1-100.
        type: integer
    type: object
  v1.WrapperSandbox:
    properties:
      runningSandboxName:
        type: string
      sandboxes:
        $ref: '#/definitions/open-hydra-server-api_pkg_open-hydra_apis.PluginList'
    type: object
  v1.XInferenceModel:
    properties:
      accelerators:
        items:
          type: string
        type: array
      address:
        type: string
      context_length:
        type: integer
      created:
        type: integer
      dimensions:
        type: integer
      gpu_memory_utilization:
        description: should be always less equal than 1
        type: number
      id:
        type: string
      language:
        items:
          type: string
        type: array
      max_tokens:
        type: integer
      model_ability:
        items:
          type: string
        type: array
      model_description:
        type: string
      model_family:
        type: string
      model_format:
        type: string
      model_hub:
        type: string
      model_lang:
        items:
          type: string
        type: array
      model_name:
        type: string
      model_revision:
        type: string
      model_size_in_billions:
        type: integer
      model_type:
        type: string
      object:
        type: string
      owned_by:
        type: string
      quantization:
        type: string
      replica:
        type: integer
      revision:
        type: string
    type: object
  v1.XInferenceModelFontLauncher:
    properties:
      model_name:
        type: string
      template:
        type: string
    type: object
  v1.XInferenceModelList:
    properties:
      data:
        items:
          $ref: '#/definitions/v1.XInferenceModel'
        type: array
      object:
        type: string
    type: object
  v1.knowledgeBaseFileDetail:
    properties:
      create_time:
        type: string
      custom_docs:
        type: boolean
      docs_count:
        type: integer
      document_loader:
        type: string
      file_ext:
        type: string
      file_mtime:
        type: number
      file_name:
        type: string
      file_size:
        type: integer
      file_version:
        type: integer
      in_db:
        type: boolean
      in_folder:
        type: boolean
      kb_name:
        type: string
      "no":
        type: integer
      text_splitter:
        type: string
    type: object
info:
  contact: {}
paths:
  /apis/core-api.openhydra.io/v1/flavors/{flavorId}:
    get:
      consumes:
      - application/json
      description: show flavor detail
      parameters:
      - description: flavor id
        in: path
        name: flavorId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Flavor'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show flavor detail
      tags:
      - flavor
  /apis/core-api.openhydra.io/v1/groups:
    get:
      consumes:
      - application/json
      description: list all groups
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.CoreGroup'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: list all groups
      tags:
      - group
    post:
      consumes:
      - application/json
      description: create group
      parameters:
      - description: group post
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.CoreGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.CoreGroup'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: create group
      tags:
      - group
  /apis/core-api.openhydra.io/v1/groups/{groupId}:
    delete:
      consumes:
      - application/json
      description: delete group
      parameters:
      - description: group id
        in: path
        name: groupId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.CoreGroup'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: delete group
      tags:
      - group
    get:
      consumes:
      - application/json
      description: get detail of group with given username
      parameters:
      - description: group id
        in: path
        name: groupId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.CoreGroup'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: get detail of group with given username
      tags:
      - group
    put:
      consumes:
      - application/json
      description: update group
      parameters:
      - description: group id
        in: path
        name: groupId
        required: true
        type: string
      - description: group post
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.CoreGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.CoreGroup'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: update group
      tags:
      - group
  /apis/core-api.openhydra.io/v1/groups/{groupId}/users:
    get:
      consumes:
      - application/json
      description: list all users in group
      parameters:
      - description: group id
        in: path
        name: groupId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.CoreUser'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: list all users in group
      tags:
      - group
    put:
      consumes:
      - application/json
      description: add users to group
      parameters:
      - description: group id
        in: path
        name: groupId
        required: true
        type: string
      - description: users to add to group
        in: body
        name: request
        required: true
        schema:
          items:
            $ref: '#/definitions/v1.CoreUser'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/route.CustomErrorUsersAddToGroup'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: add users to group
      tags:
      - group
  /apis/core-api.openhydra.io/v1/groups/{groupId}/users/{userId}:
    delete:
      consumes:
      - application/json
      description: remove user from group
      parameters:
      - description: group id
        in: path
        name: groupId
        required: true
        type: string
      - description: user id
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.CoreUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: remove user from group
      tags:
      - group
    put:
      consumes:
      - application/json
      description: add user to group
      parameters:
      - description: group id
        in: path
        name: groupId
        required: true
        type: string
      - description: user id
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.CoreUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: add user to group
      tags:
      - group
  /apis/core-api.openhydra.io/v1/groups/{groupId}/users/not-in-group/list:
    get:
      consumes:
      - application/json
      description: list all users not in group
      parameters:
      - description: group id
        in: path
        name: groupId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.CoreUser'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: list all users not in group
      tags:
      - group
  /apis/core-api.openhydra.io/v1/groups/summary/all/count:
    get:
      consumes:
      - application/json
      description: show group summary
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.CoreGroupSummary'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show group summary
      tags:
      - group
  /apis/core-api.openhydra.io/v1/licenses/{licenseId}:
    get:
      consumes:
      - application/json
      description: show license detail
      parameters:
      - description: license id
        in: path
        name: licenseId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.SystemInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show license detail
      tags:
      - license
  /apis/core-api.openhydra.io/v1/roles:
    get:
      consumes:
      - application/json
      description: show role list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.CoreRole'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show role list
      tags:
      - role
    post:
      consumes:
      - application/json
      description: create role
      parameters:
      - description: role post
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.CoreRole'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.CoreRole'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: create role
      tags:
      - role
  /apis/core-api.openhydra.io/v1/roles/{roleId}:
    delete:
      consumes:
      - application/json
      description: delete role
      parameters:
      - description: role id
        in: path
        name: roleId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.CoreRole'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: delete role
      tags:
      - role
    get:
      consumes:
      - application/json
      description: show role detail
      parameters:
      - description: role id
        in: path
        name: roleId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.CoreRole'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show role detail
      tags:
      - role
    put:
      consumes:
      - application/json
      description: update role
      parameters:
      - description: role id
        in: path
        name: roleId
        required: true
        type: string
      - description: role post
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.CoreRole'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.CoreRole'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: update role
      tags:
      - role
  /apis/core-api.openhydra.io/v1/sandboxes/{userId}:
    get:
      consumes:
      - application/json
      description: show openhydra sandbox list
      parameters:
      - description: whether to load running sandbox stat e.g. ?loadRunningStat=1
        in: query
        name: loadRunningStat
        type: string
      - description: user id
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.WrapperSandbox'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show openhydra sandbox list
      tags:
      - flavor
  /apis/core-api.openhydra.io/v1/summary/{summaryType}:
    get:
      consumes:
      - application/json
      description: show resource summary
      parameters:
      - description: summary type not you can use any kind of string
        in: path
        name: summaryType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Summary'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show resource summary
      tags:
      - summary
  /apis/core-api.openhydra.io/v1/users:
    get:
      consumes:
      - application/json
      description: list all users
      parameters:
      - description: filter with username e.g. ?name=ZhangSan
        in: query
        name: name
        type: string
      - description: filter with group e.g. ?group=id1&group=id2
        in: query
        name: group
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.CoreUser'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: list all users
      tags:
      - user
    post:
      consumes:
      - application/json
      description: create user
      parameters:
      - description: user post
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.CoreUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.CoreUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: create user
      tags:
      - user
  /apis/core-api.openhydra.io/v1/users/{id}:
    get:
      consumes:
      - application/json
      description: show user detail
      parameters:
      - description: user id
        in: path
        name: userId
        required: true
        type: string
      - description: load permission or not e.g. ?loadPermission=1
        in: query
        name: loadPermission
        type: string
      - description: load password or not e.g. ?loadPassword=1
        in: query
        name: loadPassword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.CoreUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show user detail
      tags:
      - user
  /apis/core-api.openhydra.io/v1/users/{userId}:
    delete:
      consumes:
      - application/json
      description: delete user with given id
      parameters:
      - description: user id
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.CoreUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: delete user with given id
      tags:
      - user
    put:
      consumes:
      - application/json
      description: update user
      parameters:
      - description: user id
        in: path
        name: userId
        required: true
        type: string
      - description: user post
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.CoreUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.CoreUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: update user
      tags:
      - user
  /apis/core-api.openhydra.io/v1/users/login:
    post:
      consumes:
      - application/json
      description: user login
      parameters:
      - description: login params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.CoreUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.CoreUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: user login
      tags:
      - user
  /apis/core-api.openhydra.io/v1/users/upload:
    post:
      consumes:
      - multipart/form-data
      description: upload users from csv or txt split by comma
      parameters:
      - description: file uploads
        in: body
        name: file
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: upload users from csv or txt split by comma
      tags:
      - user
  /apis/core-api.openhydra.io/v1/versions/{versionId}:
    get:
      consumes:
      - application/json
      description: show version info
      parameters:
      - description: version id
        in: path
        name: versionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.VersionInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show version info
      tags:
      - version
  /apis/open-hydra-server.openhydra.io/extendV1/settings:
    get:
      consumes:
      - application/json
      description: get settings list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/open-hydra-server-api_cmd_open-hydra-server_app_config.OpenHydraServerConfig'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: get settings list
      tags:
      - settings
  /apis/open-hydra-server.openhydra.io/extendV1/settings/{settingId}:
    get:
      consumes:
      - application/json
      description: get settings detail
      parameters:
      - description: setting id
        in: path
        name: settingId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/open-hydra-server-api_cmd_open-hydra-server_app_config.OpenHydraServerConfig'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: get settings detail
      tags:
      - settings
    patch:
      consumes:
      - application/json
      description: patch settings
      parameters:
      - description: setting id
        in: path
        name: settingId
        required: true
        type: string
      - description: setting patch
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/open-hydra-server-api_cmd_open-hydra-server_app_config.OpenHydraServerConfig'
      - description: either storage,runtimeResource,serverIp,gpuType  e.g. ?saveSection=storage
        in: query
        name: saveSection
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/open-hydra-server-api_cmd_open-hydra-server_app_config.OpenHydraServerConfig'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: patch settings
      tags:
      - settings
  /apis/open-hydra-server.openhydra.io/v1/courses:
    get:
      consumes:
      - application/json
      description: show course list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_course_core_v1.Course'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show course list
      tags:
      - course
    post:
      consumes:
      - application/json
      description: create course
      parameters:
      - description: course post
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_course_core_v1.Course'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_course_core_v1.Course'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: create course
      tags:
      - course
  /apis/open-hydra-server.openhydra.io/v1/courses/{courseId}:
    delete:
      consumes:
      - application/json
      description: delete course
      parameters:
      - description: course id
        in: path
        name: courseId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_course_core_v1.Course'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: delete course
      tags:
      - course
    get:
      consumes:
      - application/json
      description: show course detail
      parameters:
      - description: course id
        in: path
        name: courseId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_course_core_v1.Course'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show course detail
      tags:
      - course
  /apis/open-hydra-server.openhydra.io/v1/datasets:
    get:
      consumes:
      - application/json
      description: show dataset list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_dataset_core_v1.Dataset'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show dataset list
      tags:
      - dataset
    post:
      consumes:
      - application/json
      description: create dataset
      parameters:
      - description: login params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_dataset_core_v1.Dataset'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_dataset_core_v1.Dataset'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: create dataset
      tags:
      - dataset
  /apis/open-hydra-server.openhydra.io/v1/datasets/{datasetId}:
    delete:
      consumes:
      - application/json
      description: delete dataset
      parameters:
      - description: dataset id
        in: path
        name: datasetId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_dataset_core_v1.Dataset'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: delete dataset
      tags:
      - dataset
    get:
      consumes:
      - application/json
      description: show dataset detail
      parameters:
      - description: dataset id
        in: path
        name: datasetId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_dataset_core_v1.Dataset'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show dataset detail
      tags:
      - dataset
  /apis/open-hydra-server.openhydra.io/v1/devices:
    get:
      consumes:
      - application/json
      description: show device list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_device_core_v1.Device'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show device list
      tags:
      - device
    post:
      consumes:
      - application/json
      description: create device
      parameters:
      - description: device post
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_device_core_v1.Device'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_device_core_v1.Device'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: create device
      tags:
      - device
  /apis/open-hydra-server.openhydra.io/v1/devices/{userId}:
    delete:
      consumes:
      - application/json
      description: delete device with given username
      parameters:
      - description: user id
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_device_core_v1.Device'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: delete device with given username
      tags:
      - device
    get:
      consumes:
      - application/json
      description: get detail of device with given username
      parameters:
      - description: user id
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/open-hydra-server-api_pkg_apis_open-hydra-api_device_core_v1.Device'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: get detail of device with given username
      tags:
      - device
  /apis/rag.openhydra.io/v1/chat_quick_starts:
    get:
      consumes:
      - application/json
      description: show chat quick starts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.ChatQuickStarts'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show chat quick starts
      tags:
      - rag
  /apis/rag.openhydra.io/v1/chats:
    post:
      consumes:
      - application/json
      description: create chats
      parameters:
      - description: chat post
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.ChatPost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: create chats
      tags:
      - rag
  /apis/rag.openhydra.io/v1/conversations:
    get:
      consumes:
      - application/json
      description: show conversations
      parameters:
      - description: chat type e.g. chatTypes=llm_chat | file_chat | kb_chat | all
          or chatTypes=llm_chat,file_chat
        in: query
        name: chatTypes
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Conversation'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show conversations
      tags:
      - rag
    post:
      consumes:
      - application/json
      description: create conversation
      parameters:
      - description: conversation post
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.Conversation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Conversation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: create conversation
      tags:
      - rag
  /apis/rag.openhydra.io/v1/conversations/{conversationId}:
    delete:
      consumes:
      - application/json
      description: delete conversation by id
      parameters:
      - description: conversation id
        in: path
        name: conversationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Conversation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: delete conversation by id
      tags:
      - rag
    get:
      consumes:
      - application/json
      description: show conversation by id
      parameters:
      - description: conversation id
        in: path
        name: conversationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Conversation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show conversation by id
      tags:
      - rag
    patch:
      consumes:
      - application/json
      description: patch conversation by id
      parameters:
      - description: conversation id
        in: path
        name: conversationId
        required: true
        type: string
      - description: conversation patch
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.Conversation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Conversation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: patch conversation by id
      tags:
      - rag
  /apis/rag.openhydra.io/v1/conversations/{conversationId}/messages:
    get:
      consumes:
      - application/json
      description: show messages of a conversation
      parameters:
      - description: conversation id
        in: path
        name: conversationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.ConversationMessage'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show messages of a conversation
      tags:
      - rag
  /apis/rag.openhydra.io/v1/conversations/{conversationId}/messages/{messageId}:
    get:
      consumes:
      - application/json
      description: show messages by message id
      parameters:
      - description: message id
        in: path
        name: messageId
        required: true
        type: string
      - description: conversation id
        in: path
        name: conversationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.ConversationMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show messages by message id
      tags:
      - rag
  /apis/rag.openhydra.io/v1/conversations/users/{userId}:
    delete:
      consumes:
      - application/json
      description: delete conversation of user
      parameters:
      - description: user id
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Conversation'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: delete conversation of user
      tags:
      - rag
    get:
      consumes:
      - application/json
      description: show conversation of user
      parameters:
      - description: user id
        in: path
        name: userId
        required: true
        type: string
      - description: chat type e.g. chatTypes=llm_chat | file_chat | kb_chat | all
          or chatTypes=llm_chat,file_chat
        in: query
        name: chatTypes
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Conversation'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show conversation of user
      tags:
      - rag
  /apis/rag.openhydra.io/v1/file_chat:
    post:
      consumes:
      - application/json
      description: chat with a file
      parameters:
      - description: message post
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.FileChatPost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: chat with a file
      tags:
      - rag
  /apis/rag.openhydra.io/v1/file_chat/{userId}:
    post:
      consumes:
      - multipart/form-data
      description: create a file chat alone with conversation and file
      parameters:
      - description: user id
        in: path
        name: userId
        required: true
        type: string
      - description: user id
        in: body
        name: user_id
        required: true
        schema:
          type: string
      - description: file uploads
        in: body
        name: files
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Conversation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: create a file chat alone with conversation and file
      tags:
      - rag
  /apis/rag.openhydra.io/v1/knowledge_bases:
    get:
      consumes:
      - application/json
      description: show public knowledge bases
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.KnowledgeBase'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show public knowledge bases
      tags:
      - rag
    post:
      consumes:
      - application/json
      description: create knowledge base
      parameters:
      - description: knowledge base post
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.KnowledgeBase'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.KnowledgeBase'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: create knowledge base
      tags:
      - rag
  /apis/rag.openhydra.io/v1/knowledge_bases/{knowledgeBaseId}:
    delete:
      consumes:
      - application/json
      description: delete knowledge base
      parameters:
      - description: knowledge base name
        in: path
        name: knowledgeBaseName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.KnowledgeBase'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: delete knowledge base
      tags:
      - rag
    get:
      consumes:
      - application/json
      description: show knowledge base detail
      parameters:
      - description: knowledge base name
        in: path
        name: knowledgeBaseName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.KnowledgeBase'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show knowledge base detail
      tags:
      - rag
    patch:
      consumes:
      - application/json
      description: patch knowledge base
      parameters:
      - description: knowledge base name
        in: path
        name: knowledgeBaseName
        required: true
        type: string
      - description: knowledge base patch
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.KnowledgeBase'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.KnowledgeBase'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: patch knowledge base
      tags:
      - rag
  /apis/rag.openhydra.io/v1/knowledge_bases/{knowledgeBaseId}/files:
    delete:
      consumes:
      - application/json
      description: delete knowledge base file
      parameters:
      - description: knowledge base name
        in: path
        name: knowledgeBaseName
        required: true
        type: string
      - description: files to be delete
        in: body
        name: fileIds
        required: true
        schema:
          $ref: '#/definitions/v1.KnowledgeBaseFilesToDelete'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.KnowledgeBaseCommonResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: delete knowledge base file
      tags:
      - rag
    get:
      consumes:
      - application/json
      description: show knowledge base files
      parameters:
      - description: knowledge base name
        in: path
        name: knowledgeBaseName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.KnowledgeBaseFileList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show knowledge base files
      tags:
      - rag
  /apis/rag.openhydra.io/v1/knowledge_bases/{knowledgeBaseId}/kb_chat:
    post:
      consumes:
      - application/json
      description: chat with a knowledge base
      parameters:
      - description: message post
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.KbChatPost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: chat with a knowledge base
      tags:
      - rag
  /apis/rag.openhydra.io/v1/knowledge_bases/{knowledgeBaseId}/upload:
    post:
      consumes:
      - multipart/form-data
      description: upload file to knowledge base
      parameters:
      - description: knowledge base name
        in: path
        name: knowledgeBaseId
        required: true
        type: string
      - description: knowledge base id which will direct forward to south api
        in: body
        name: kb_id
        required: true
        schema:
          type: string
      - description: knowledge base name which will direct forward to south api
        in: body
        name: kb_name
        required: true
        schema:
          type: string
      - description: array of files to upload, support multiple files
        in: formData
        name: files
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.KnowledgeBase'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: upload file to knowledge base
      tags:
      - rag
  /apis/rag.openhydra.io/v1/knowledge_bases/users/{userId}:
    get:
      consumes:
      - application/json
      description: show knowledge bases of user
      parameters:
      - description: user id
        in: path
        name: userId
        required: true
        type: string
      - description: either groupedKB or publicKB or publicKB,groupedKB e.g. ?appendKB=publicKB,groupedKB
        in: query
        name: appendKB
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.KnowledgeBase'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show knowledge bases of user
      tags:
      - rag
  /apis/rag.openhydra.io/v1/quick_file_chat:
    post:
      consumes:
      - application/json
      description: create a quick file chat
      parameters:
      - description: conversation post
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.Conversation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Conversation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: create a quick file chat
      tags:
      - rag
  /apis/ray-llm-inference.openhydra.io/v1/models:
    get:
      consumes:
      - application/json
      description: show ray_llm models
      parameters:
      - description: either llm_models or embedding_models or all e.g. ?llmType=llm_models
        in: query
        name: llmType
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show ray_llm models
      tags:
      - ray-llm-inference
    post:
      consumes:
      - application/json
      description: create model
      parameters:
      - description: model post
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/south.RayDeployment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/south.RayDeployment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: create model
      tags:
      - ray-llm-inference
  /apis/ray-llm-inference.openhydra.io/v1/models/{modelId}:
    delete:
      consumes:
      - application/json
      description: delete ray_llm model
      parameters:
      - description: model id
        in: path
        name: modelId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/south.RayDeployment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: delete ray_llm model
      tags:
      - ray-llm-inference
    get:
      consumes:
      - application/json
      description: show ray_llm model detail
      parameters:
      - description: model id
        in: path
        name: modelId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/south.RayDeployment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show ray_llm model detail
      tags:
      - ray-llm-inference
  /apis/xinference.openhydra.io/v1/models:
    get:
      consumes:
      - application/json
      description: show xinference models
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.XInferenceModelList'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show xinference models
      tags:
      - xinference
    post:
      consumes:
      - application/json
      description: create xinference model
      parameters:
      - description: model post
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.XInferenceModelFontLauncher'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.XInferenceModelFontLauncher'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: create xinference model
      tags:
      - xinference
  /apis/xinference.openhydra.io/v1/models/{modelId}:
    delete:
      consumes:
      - application/json
      description: delete xinference model
      parameters:
      - description: model id
        in: path
        name: modelId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.XInferenceModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: delete xinference model
      tags:
      - xinference
    get:
      consumes:
      - application/json
      description: show xinference model detail
      parameters:
      - description: model id
        in: path
        name: modelId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.XInferenceModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.CustomError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/http.CustomError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.CustomError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.CustomError'
      summary: show xinference model detail
      tags:
      - xinference
swagger: "2.0"
